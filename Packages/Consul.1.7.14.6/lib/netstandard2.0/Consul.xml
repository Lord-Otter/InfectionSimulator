<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Consul</name>
    </assembly>
    <members>
        <member name="T:Consul.ACLType">
            <summary>
            [Deprecated] The type of ACL token, which sets the permissions ceiling
            </summary>
        </member>
        <member name="P:Consul.ACLType.Client">
            <summary>
            [Deprecated] Token type which cannot modify ACL rules
            </summary>
        </member>
        <member name="P:Consul.ACLType.Management">
            <summary>
            [Deprecated] Token type which is allowed to perform all actions
            </summary>
        </member>
        <member name="T:Consul.ACLEntry">
            <summary>
            [Deprecated] ACLEntry is used to represent an ACL entry (Legacy Token)
            </summary>
        </member>
        <member name="T:Consul.ACL">
            <summary>
            [Deprecated] ACL can be used to query the ACL endpoints
            </summary>
        </member>
        <member name="M:Consul.ACL.Create(Consul.ACLEntry,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Create is used to generate a new token with the given parameters
            </summary>
            <param name="acl">The ACL entry to create</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the newly created ACL token</returns>
        </member>
        <member name="M:Consul.ACL.Create(Consul.ACLEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Create is used to generate a new token with the given parameters
            </summary>
            <param name="acl">The ACL entry to create</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the newly created ACL token</returns>
        </member>
        <member name="M:Consul.ACL.Update(Consul.ACLEntry,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Update is used to update the rules of an existing token
            </summary>
            <param name="acl">The ACL entry to update</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.ACL.Update(Consul.ACLEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Update is used to update the rules of an existing token
            </summary>
            <param name="acl">The ACL entry to update</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.ACL.Destroy(System.String,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Destroy is used to destroy a given ACL token ID
            </summary>
            <param name="id">The ACL ID to destroy</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.ACL.Destroy(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Destroy is used to destroy a given ACL token ID
            </summary>
            <param name="id">The ACL ID to destroy</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.ACL.Clone(System.String,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Clone is used to return a new token cloned from an existing one
            </summary>
            <param name="id">The ACL ID to clone</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the newly created ACL token</returns>
        </member>
        <member name="M:Consul.ACL.Clone(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Clone is used to return a new token cloned from an existing one
            </summary>
            <param name="id">The ACL ID to clone</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the newly created ACL token</returns>
        </member>
        <member name="M:Consul.ACL.Info(System.String,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Info is used to query for information about an ACL token
            </summary>
            <param name="id">The ACL ID to request information about</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the ACL entry matching the provided ID, or a query result with a null response if no token matched the provided ID</returns>
        </member>
        <member name="M:Consul.ACL.Info(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] Info is used to query for information about an ACL token
            </summary>
            <param name="id">The ACL ID to request information about</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the ACL entry matching the provided ID, or a query result with a null response if no token matched the provided ID</returns>
        </member>
        <member name="M:Consul.ACL.List(System.Threading.CancellationToken)">
            <summary>
            [Deprecated] List is used to get all the ACL tokens
            </summary>
            <returns>A write result containing the list of all ACLs</returns>
        </member>
        <member name="M:Consul.ACL.List(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] List is used to get all the ACL tokens
            </summary>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the list of all ACLs</returns>
        </member>
        <member name="M:Consul.ACL.TranslateRules(System.String,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] TranslateRules will translate legacy rule syntax to latest syntax
            </summary>
            <param name="rules">The legacy rule(s) to translate</param>
            <param name="ct">>Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A string containing the translated rule(s)</returns>
        </member>
        <member name="M:Consul.ACL.TranslateRules(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] TranslateRules will translate legacy rule syntax to latest syntax
            </summary>
            <param name="rules">The legacy rule(s) to translate</param>
            <param name="q">Customized query options</param>
            <param name="ct">>Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A string containing the translated rule(s)</returns>
        </member>
        <member name="M:Consul.ACL.TranslateLegacyTokenRules(System.String,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] TranslateLegacyTokenRules will translate legacy rule syntax on a legacy token in to the latest syntax
            </summary>
            <param name="id">The legacy token ID whos rule(s) need translated</param>
            <param name="ct">>Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A string containing the translated rule(s)</returns>
        </member>
        <member name="M:Consul.ACL.TranslateLegacyTokenRules(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            [Deprecated] TranslateLegacyTokenRules will translate legacy rule syntax on a legacy token in to the latest syntax
            </summary>
            <param name="id">The legacy token ID whos rule(s) need translated</param>
            <param name="q">Customized query options</param>
            <param name="ct">>Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A string containing the translated rule(s)</returns>
        </member>
        <member name="T:Consul.ConsulClient">
            <summary>
            Represents a persistant connection to a Consul agent. Instances of this class should be created rarely and reused often.
            </summary>
            <summary>
            KV is used to return a handle to the K/V apis
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.ACL">
            <summary>
            [Deprecated] ACL returns a handle to the ACL endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.ACLReplication">
            <summary>
            ACLReplication returns a handle to the ACLReplication endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Agent">
            <summary>
            Agent returns a handle to the agent endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.AuthMethod">
            <summary>
            AuthMethod returns a handle to the ACL AuthMethod endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Catalog">
            <summary>
            Catalog returns a handle to the catalog endpoints
            </summary>
        </member>
        <member name="T:Consul.ConsulClient.ConsulClientConfigurationContainer">
            <summary>
            This class is used to group all the configurable bits of a ConsulClient into a single pointer reference
            which is great for implementing reconfiguration later.
            </summary>
        </member>
        <member name="M:Consul.ConsulClient.#ctor">
            <summary>
            Initializes a new Consul client with a default configuration that connects to 127.0.0.1:8500.
            </summary>
        </member>
        <member name="M:Consul.ConsulClient.#ctor(System.Action{Consul.ConsulClientConfiguration})">
            <summary>
            Initializes a new Consul client with the ability to set portions of the configuration.
            </summary>
            <param name="configOverride">The Action to modify the default configuration with</param>
        </member>
        <member name="M:Consul.ConsulClient.#ctor(System.Action{Consul.ConsulClientConfiguration},System.Action{System.Net.Http.HttpClient})">
            <summary>
            Initializes a new Consul client with the ability to set portions of the configuration and access the underlying HttpClient for modification.
            The HttpClient is modified to set options like the request timeout and headers.
            The Timeout property also applies to all long-poll requests and should be set to a value that will encompass all successful requests.
            </summary>
            <param name="configOverride">The Action to modify the default configuration with</param>
            <param name="clientOverride">The Action to modify the HttpClient with</param>
        </member>
        <member name="M:Consul.ConsulClient.#ctor(System.Action{Consul.ConsulClientConfiguration},System.Action{System.Net.Http.HttpClient},System.Action{System.Net.Http.HttpClientHandler})">
            <summary>
            Initializes a new Consul client with the ability to set portions of the configuration and access the underlying HttpClient and WebRequestHandler for modification.
            The HttpClient is modified to set options like the request timeout and headers.
            The WebRequestHandler is modified to set options like Proxy and Credentials.
            The Timeout property also applies to all long-poll requests and should be set to a value that will encompass all successful requests.
            </summary>
            <param name="configOverride">The Action to modify the default configuration with</param>
            <param name="clientOverride">The Action to modify the HttpClient with</param>
            <param name="handlerOverride">The Action to modify the WebRequestHandler with</param>
        </member>
        <member name="M:Consul.ConsulClient.#ctor(Consul.ConsulClientConfiguration)">
            <summary>
            Initializes a new Consul client with the configuration specified.
            </summary>
            <param name="config">A Consul client configuration</param>
        </member>
        <member name="M:Consul.ConsulClient.#ctor(Consul.ConsulClientConfiguration,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new Consul client with the configuration specified and a custom HttpClient, which is useful for setting proxies/custom timeouts.
            The HttpClient must accept the "application/json" content type and the Timeout property should be set to at least 15 minutes to allow for blocking queries.
            </summary>
            <param name="config">A Consul client configuration</param>
            <param name="client">A custom HttpClient. The lifetime, including disposal, of this HttpClient is not handled by ConsulClient</param>
        </member>
        <member name="P:Consul.ConsulClient.Configuration">
            <summary>
            ConsulClient returns a handle to the catalog endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Connect">
            <summary>
            Connect returns a handle to the Connect endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Coordinate">
            <summary>
            Session returns a handle to the session endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.DiscoveryChain">
            <summary>
            DiscoveryChain returns a handle to the discovery chain endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Event">
            <summary>
            Event returns a handle to the event endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Health">
            <summary>
            Health returns a handle to the health endpoint
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.KV">
            <summary>
            KV returns a handle to the KV endpoint
            </summary>
        </member>
        <member name="M:Consul.ConsulClient.CreateLock(System.String)">
            <summary>
            CreateLock returns an unlocked lock which can be used to acquire and release the mutex. The key used must have write permissions.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Consul.ConsulClient.CreateLock(Consul.LockOptions)">
            <summary>
            CreateLock returns an unlocked lock which can be used to acquire and release the mutex. The key used must have write permissions.
            </summary>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Consul.ConsulClient.AcquireLock(System.String,System.Threading.CancellationToken)">
            <summary>
            AcquireLock creates a lock that is already acquired when this call returns.
            </summary>
            <param name="key"></param>
            <param name="ct">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Consul.ConsulClient.AcquireLock(Consul.LockOptions,System.Threading.CancellationToken)">
            <summary>
            AcquireLock creates a lock that is already acquired when this call returns.
            </summary>
            <param name="opts"></param>
            <param name="ct">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Consul.ConsulClient.ExecuteLocked(System.String,System.Action,System.Threading.CancellationToken)">
            <summary>
            ExecuteLock accepts a delegate to execute in the context of a lock, releasing the lock when completed.
            </summary>
            <param name="key"></param>
            <param name="action"></param>
            <param name="ct">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Consul.ConsulClient.ExecuteLocked(Consul.LockOptions,System.Action,System.Threading.CancellationToken)">
            <summary>
            ExecuteLock accepts a delegate to execute in the context of a lock, releasing the lock when completed.
            </summary>
            <param name="opts"></param>
            <param name="action"></param>
            <param name="ct">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Consul.ConsulClient.ExecuteLocked(System.String,System.Threading.CancellationToken,System.Action)">
            <summary>
            ExecuteLock accepts a delegate to execute in the context of a lock, releasing the lock when completed.
            </summary>
            <param name="key"></param>
            <param name="ct">The cancellation token</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Consul.ConsulClient.ExecuteLocked(Consul.LockOptions,System.Threading.CancellationToken,System.Action)">
            <summary>
            ExecuteLock accepts a delegate to execute in the context of a lock, releasing the lock when completed.
            </summary>
            <param name="opts"></param>
            <param name="ct">The cancellation token</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Consul.ConsulClient.Namespaces">
            <summary>
            Namespaces returns a handle to the namespaces endpoint
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Operator">
            <summary>
            Operator returns a handle to the operator endpoints.
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Policy">
            <summary>
            Policy returns a handle to the ACL Policy endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.PreparedQuery">
            <summary>
            Catalog returns a handle to the catalog endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Raw">
            <summary>
            Raw returns a handle to query endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Role">
            <summary>
            Role returns a handle to the ACL Role endpoints
            </summary>
        </member>
        <member name="M:Consul.ConsulClient.Semaphore(System.String,System.Int32)">
            <summary>
            Used to created a Semaphore which will operate at the given KV prefix and uses the given limit for the semaphore.
            The prefix must have write privileges, and the limit must be agreed upon by all contenders.
            </summary>
            <param name="prefix">The keyspace prefix (e.g. "locks/semaphore")</param>
            <param name="limit">The number of available semaphore slots</param>
            <returns>An unlocked semaphore</returns>
        </member>
        <member name="M:Consul.ConsulClient.Semaphore(Consul.SemaphoreOptions)">
            <summary>
            SemaphoreOpts is used to create a Semaphore with the given options.
            The prefix must have write privileges, and the limit must be agreed upon by all contenders.
            If a Session is not provided, one will be created.
            </summary>
            <param name="opts">The semaphore options</param>
            <returns>An unlocked semaphore</returns>
        </member>
        <member name="P:Consul.ConsulClient.Session">
            <summary>
            Session returns a handle to the session endpoint
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Snapshot">
            <summary>
            Catalog returns a handle to the snapshot endpoints
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Status">
            <summary>
            Status returns a handle to the status endpoint
            </summary>
        </member>
        <member name="P:Consul.ConsulClient.Token">
            <summary>
            Token returns a handle to the ACL Token endpoints
            </summary>
        </member>
        <member name="T:Consul.ACLReplicationEntry">
            <summary>
            Represents an Entry in Consul for ACL Replication
            </summary>
        </member>
        <member name="T:Consul.ACLReplication">
            <summary>
            Allows querying of ACL Replication in Consul
            </summary>
        </member>
        <member name="M:Consul.ACLReplication.Status(System.Threading.CancellationToken)">
            <summary>
            Get the current status of ACL Replication in Consul
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result with details of the ACL Replication system in Consul</returns>
        </member>
        <member name="M:Consul.ACLReplication.Status(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the current status of ACL Replication in Consul
            </summary>
            <param name="queryOptions">Any query options for the request</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result with details of the ACL Replication system in Consul</returns>
        </member>
        <member name="T:Consul.TTLStatus">
            <summary>
            The status of a TTL check
            </summary>
        </member>
        <member name="T:Consul.TTLStatusConverter">
            <summary>
            TLS Status Convertor (to and from JSON)
            </summary>
        </member>
        <member name="T:Consul.AgentCheck">
            <summary>
            AgentCheck represents a check known to the agent
            </summary>
        </member>
        <member name="T:Consul.AgentService">
            <summary>
            AgentService represents a service known to the agent
            </summary>
        </member>
        <member name="T:Consul.ServiceKind">
            <summary>
            ServiceKind specifies the type of service.
            </summary>
        </member>
        <member name="T:Consul.AgentMember">
            <summary>
            AgentMember represents a cluster member known to the agent
            </summary>
        </member>
        <member name="T:Consul.AgentServiceRegistration">
            <summary>
            AgentServiceRegistration is used to register a new service
            </summary>
        </member>
        <member name="T:Consul.AgentCheckRegistration">
            <summary>
            AgentCheckRegistration is used to register a new check
            </summary>
        </member>
        <member name="T:Consul.AgentServiceConnect">
            <summary>
            AgentServiceConnect specifies the configuration for Connect
            </summary>
        </member>
        <member name="T:Consul.AgentServiceProxy">
            <summary>
            AgentServiceProxy specifies the configuration for a Connect service proxy instance. This is only valid if Kind defines a proxy or gateway.
            </summary>
        </member>
        <member name="T:Consul.AgentServiceProxyUpstream">
            <summary>
            AgentServiceProxyUpstream specifies the upstream service for which the proxy should create a listener.
            </summary>
        </member>
        <member name="T:Consul.AgentServiceCheck">
            <summary>
            AgentServiceCheck is used to create an associated check for a service
            </summary>
        </member>
        <member name="P:Consul.AgentServiceCheck.DeregisterCriticalServiceAfter">
            <summary>
            In Consul 0.7 and later, checks that are associated with a service
            may also contain this optional DeregisterCriticalServiceAfter field,
            which is a timeout in the same Go time format as Interval and TTL. If
            a check is in the critical state for more than this configured value,
            then its associated service (and all of its associated checks) will
            automatically be deregistered.
            </summary>
        </member>
        <member name="T:Consul.LocalServiceHealth">
            <summary>
            LocalServiceHealth represents the health of a service and its associated checks as returned by the Agent API
            </summary>
        </member>
        <member name="T:Consul.AgentVersion">
            <summary>
            AgentVersion represents the version information for the Consul agent
            </summary>
        </member>
        <member name="T:Consul.LogLevel">
            <summary>
            Log Level Enum
            </summary>
        </member>
        <member name="T:Consul.MemoryInfo">
            <summary>
            MemoryInfo represents the memory statistics for the agent
            </summary>
        </member>
        <member name="T:Consul.CPUInfo">
            <summary>
            CPUInfo represents the CPU statistics for the agent
            </summary>
        </member>
        <member name="T:Consul.HostInfo">
            <summary>
            HostInfo represents the host information for the agent
            </summary>
        </member>
        <member name="T:Consul.DiskInfo">
            <summary>
            DiskInfo represents the disk statistics for the agent
            </summary>
        </member>
        <member name="T:Consul.AgentHostInfo">
            <summary>
            AgentHostInfo represents the host information for the agent
            </summary>
        </member>
        <member name="T:Consul.Metrics">
            <summary>
            Metrics represents the metrics returned by the Agent API
            </summary>
        </member>
        <member name="T:Consul.Gauge">
            <summary>
            Guage represents a Guage metric
            </summary>
        </member>
        <member name="T:Consul.Point">
            <summary>
            Point represents a Point metric
            </summary>
        </member>
        <member name="T:Consul.Counter">
            <summary>
            Counter represents a Counter metric
            </summary>
        </member>
        <member name="T:Consul.Sample">
            <summary>
            Sample represents a Sample metric
            </summary>
        </member>
        <member name="T:Consul.Agent">
            <summary>
            Agent can be used to query the Agent endpoints
            </summary>
        </member>
        <member name="M:Consul.Agent.Self(System.Threading.CancellationToken)">
            <summary>
            Self is used to query the agent we are speaking to for information about itself
            </summary>
            <returns>A somewhat dynamic object representing the various data elements in Self</returns>
        </member>
        <member name="P:Consul.Agent.NodeName">
            <summary>
            NodeName is used to get the node name of the agent
            </summary>
        </member>
        <member name="M:Consul.Agent.GetNodeName(System.Threading.CancellationToken)">
            <summary>
            GetNodeName is used to get the node name of the agent. The value is cached per instance of ConsulClient after the first use.
            </summary>
        </member>
        <member name="M:Consul.Agent.Checks(System.Threading.CancellationToken)">
            <summary>
            Checks returns the locally registered checks
            </summary>
            <returns>A map of the registered check names and check data</returns>
        </member>
        <member name="M:Consul.Agent.Checks(Consul.Filtering.Filter,System.Threading.CancellationToken)">
            <summary>
            Checks returns the locally registered checks
            </summary>
            <param name="filter">Specifies the expression used to filter the queries results prior to returning the data</param>
            <param name="ct">The cancellation token</param>
            <returns>A map of the registered check names and check data</returns>
        </member>
        <member name="M:Consul.Agent.Services(System.Threading.CancellationToken)">
            <summary>
            Services returns the locally registered services
            </summary>
            <returns>A map of the registered services and service data</returns>
        </member>
        <member name="M:Consul.Agent.Services(Consul.Filtering.Filter,System.Threading.CancellationToken)">
            <summary>
            Services returns the locally registered services
            </summary>
            <param name="filter">Specifies the expression used to filter the queries results prior to returning the data</param>
            <param name="ct">The cancellation token</param>
            <returns>A map of the registered services and service data</returns>
        </member>
        <member name="M:Consul.Agent.Members(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Members returns the known gossip members. The WAN flag can be used to query a server for WAN members.
            </summary>
            <returns>An array of gossip peers</returns>
        </member>
        <member name="M:Consul.Agent.ServiceRegister(Consul.AgentServiceRegistration,System.Threading.CancellationToken)">
            <summary>
            ServiceRegister is used to register a new service with the local agent
            </summary>
            <param name="service">A service registration object</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.ServiceRegister(Consul.AgentServiceRegistration,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            ServiceRegister is used to register a new service with the local agent
            </summary>
            <param name="service">A service registration object</param>
            <param name="replaceExistingChecks">Missing health checks from the request will be deleted from the agent.</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.ServiceDeregister(System.String,System.Threading.CancellationToken)">
            <summary>
            ServiceRegister is used to register a new service with the local agent
            </summary>
            <param name="serviceID">The service ID</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.PassTTL(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            PassTTL is used to set a TTL check to the passing state
            </summary>
            <param name="checkID">The check ID</param>
            <param name="note">An optional, arbitrary string to write to the check status</param>
            <param name="ct">The cancellation token</param>
        </member>
        <member name="M:Consul.Agent.WarnTTL(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            WarnTTL is used to set a TTL check to the warning state
            </summary>
            <param name="checkID">The check ID</param>
            <param name="note">An optional, arbitrary string to write to the check status</param>
            <param name="ct">The cancellation token</param>
        </member>
        <member name="M:Consul.Agent.FailTTL(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            FailTTL is used to set a TTL check to the failing state
            </summary>
            <param name="checkID">The check ID</param>
            <param name="note">An optional, arbitrary string to write to the check status</param>
            <param name="ct">The cancellation token</param>
        </member>
        <member name="M:Consul.Agent.UpdateTTL(System.String,System.String,Consul.TTLStatus,System.Threading.CancellationToken)">
            <summary>
            UpdateTTL is used to update the TTL of a check
            </summary>
            <param name="checkID">The check ID</param>
            <param name="output">An optional, arbitrary string to write to the check status</param>
            <param name="status">The state to set the check to</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.LegacyUpdateTTL(System.String,System.String,Consul.TTLStatus,System.Threading.CancellationToken)">
            <summary>
            LegacyUpdateTTL is used to update the TTL of a check
            </summary>
            <param name="checkID">The check ID</param>
            <param name="note">An optional, arbitrary string to note on the check status</param>
            <param name="status">The state to set the check to</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.CheckRegister(Consul.AgentCheckRegistration,System.Threading.CancellationToken)">
            <summary>
            CheckRegister is used to register a new check with the local agent
            </summary>
            <param name="check">A check registration object</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.CheckDeregister(System.String,System.Threading.CancellationToken)">
            <summary>
            CheckDeregister is used to deregister a check with the local agent
            </summary>
            <param name="checkID">The check ID to deregister</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.Join(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Join is used to instruct the agent to attempt a join to another cluster member
            </summary>
            <param name="addr">The address to join to</param>
            <param name="wan">Join the WAN pool</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.ForceLeave(System.String,System.Threading.CancellationToken)">
            <summary>
            ForceLeave is used to have the agent eject a failed node
            </summary>
            <param name="node">The node name to remove</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.Leave(System.String,System.Threading.CancellationToken)">
            <summary>
            Leave is used to have the agent gracefully leave the cluster and shutdown
            </summary>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.Reload(System.Threading.CancellationToken)">
            <summary>
            Reload triggers a configuration reload for the agent we are connected to.
            </summary>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.Reload(System.String,System.Threading.CancellationToken)">
            <summary>
            Reload triggers a configuration reload for the agent we are connected to.
            </summary>
            <param name="node">The node name to reload</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.EnableServiceMaintenance(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            EnableServiceMaintenance toggles service maintenance mode on for the given service ID
            </summary>
            <param name="serviceID">The service ID</param>
            <param name="reason">An optional reason</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.DisableServiceMaintenance(System.String,System.Threading.CancellationToken)">
            <summary>
            DisableServiceMaintenance toggles service maintenance mode off for the given service ID
            </summary>
            <param name="serviceID">The service ID</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.EnableNodeMaintenance(System.String,System.Threading.CancellationToken)">
            <summary>
            EnableNodeMaintenance toggles node maintenance mode on for the agent we are connected to
            </summary>
            <param name="reason">An optional reason</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.DisableNodeMaintenance(System.Threading.CancellationToken)">
            <summary>
            DisableNodeMaintenance toggles node maintenance mode off for the agent we are connected to
            </summary>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Agent.Monitor(Consul.LogLevel,System.Threading.CancellationToken)">
            <summary>
            Monitor yields log lines to display streaming logs from the agent
            Providing a CancellationToken can be used to close the connection and stop the
            log stream, otherwise the log stream will time out based on the HTTP Client's timeout value.
            </summary>
        </member>
        <member name="M:Consul.Agent.MonitorJSON(Consul.LogLevel,System.Threading.CancellationToken)">
            <summary>
            MonitorJSON is like Monitor except it returns logs in JSON format.
            </summary>
        </member>
        <member name="M:Consul.Agent.GetLocalServiceHealth(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            GetLocalServiceHealth returns the health info of a service registered on the local agent
            </summary>
            <param name="serviceName">Name of service</param>
            <param name="q"></param>
            <param name="ct">The cancellation token</param>
            <returns>An array containing the details of each passing, warning, or critical service</returns>
        </member>
        <member name="M:Consul.Agent.GetLocalServiceHealth(System.String,System.Threading.CancellationToken)">
            <summary>
            GetLocalServiceHealth returns the health info of a service registered on the local agent
            </summary>
            <param name="serviceName">Name of service</param>
            <param name="ct">The cancellation token</param>
            <returns>An array containing the details of each passing, warning, or critical service</returns>
        </member>
        <member name="M:Consul.Agent.GetWorstLocalServiceHealth(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            GetWorstLocalServiceHealth returns the worst aggregated status of a service registered on the local agent
            </summary>
            <param name="serviceName">Name of service</param>
            <param name="q"></param>
            <param name="ct">The cancellation token</param>
            <returns>passing, warning, or critical</returns>
        </member>
        <member name="M:Consul.Agent.GetWorstLocalServiceHealth(System.String,System.Threading.CancellationToken)">
            <summary>
            GetWorstLocalServiceHealth returns the worst aggregated status of a service registered on the local agent
            </summary>
            <param name="serviceName">Name of service</param>
            <param name="ct">The cancellation token</param>
            <returns>passing, warning, or critical</returns>
        </member>
        <member name="M:Consul.Agent.GetLocalServiceHealthByID(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            GetLocalServiceHealthByID returns the health info of a service registered on the local agent by ID
            </summary>
            <param name="serviceID">ID of the service</param>
            <param name="q"></param>
            <param name="ct">The cancellation token</param>
            <returns>An array containing the details of each passing, warning, or critical service</returns>
        </member>
        <member name="M:Consul.Agent.GetLocalServiceHealthByID(System.String,System.Threading.CancellationToken)">
            <summary>
            GetLocalServiceHealthByID returns the health info of a service registered on the local agent by ID
            </summary>
            <param name="serviceID">ID of the service</param>
            <param name="ct">The cancellation token</param>
            <returns>An array containing the details of each passing, warning, or critical service</returns>
        </member>
        <member name="M:Consul.Agent.GetAgentHostInfo(System.Threading.CancellationToken)">
            <summary>
            GetAgentHostInfo returns the host info of the agent
            </summary>
            <param name="ct">The cancellation token</param>
            <returns>Agent Host Information</returns>
        </member>
        <member name="M:Consul.Agent.GetAgentVersion(System.Threading.CancellationToken)">
            <summary>
            GetAgentVersion returns the version of the agent
            </summary>
            <param name="ct">The cancellation token</param>
            <returns>Version of the agent</returns>
        </member>
        <member name="M:Consul.Agent.GetServiceConfiguration(System.String,System.Threading.CancellationToken)">
            <summary>
            GetServiceConfiguration returns the service definition of a service registered on the local agent
            </summary>
            <param name="serviceId">Id of service to fetch</param>
            <param name="ct">Cancellation Token</param>
            <returns>Service Configuration</returns>
        </member>
        <member name="M:Consul.Agent.GetServiceConfiguration(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            GetServiceConfiguration returns the service definition of a service registered on the local agent
            </summary>
            <param name="serviceId">Id of service to fetch</param>
            <param name="q">Query Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>Service Configuration</returns>
        </member>
        <member name="M:Consul.Agent.ConnectAuthorize(Consul.AgentAuthorizeParameters,System.Threading.CancellationToken)">
            <summary>
            ConnectAuthorize tests whether a connection is authorized between two services
            </summary>
            <param name="parameters">Parameters for the request</param>
            <param name="ct">Cancellation Token</param>
            <returns>An Authorize Response</returns>
        </member>
        <member name="M:Consul.Agent.ConnectAuthorize(Consul.AgentAuthorizeParameters,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            ConnectAuthorize tests whether a connection is authorized between two services
            </summary>
            <param name="parameters">Parameters for the request</param>
            <param name="w">Write Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>An Authorize Response</returns>
        </member>
        <member name="M:Consul.Agent.GetCARoots(System.Threading.CancellationToken)">
            <summary>
            GetCARoots returns root certificates in the cluster
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>Root certificates</returns>
        </member>
        <member name="M:Consul.Agent.GetCARoots(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            GetCARoots returns root certificates in the cluster
            </summary>
            <param name="q">Query Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>Root certificates</returns>
        </member>
        <member name="M:Consul.Agent.GetCALeaf(System.String,System.Threading.CancellationToken)">
            <summary>
            GetCALeaf, returns the leaf certificate representing a single service
            </summary>
            <param name="serviceId">Id of service to fetch</param>
            <param name="ct">Cancellation Token</param>
            <returns>Leaf certificate</returns>
        </member>
        <member name="M:Consul.Agent.GetCALeaf(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            GetCALeaf, returns the leaf certificate representing a single service
            </summary>
            <param name="serviceId">Id of service to fetch</param>
            <param name="q">Query Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>Leaf certificate</returns>
        </member>
        <member name="T:Consul.Agent.LogStream">
            <summary>
            Log streamer
            </summary>
        </member>
        <member name="M:Consul.Agent.GetAgentMetrics(System.Threading.CancellationToken)">
            <summary>
            GetAgentMetrics returns the metrics of the local agent
            </summary>
            <param name="ct">The cancellation token</param>
            <returns>Metrics of the local agent</returns>
        </member>
        <member name="T:Consul.AuthMethodEntry">
            <summary>
            AuthMethodEntry is used to represent an ACL Auth Method entry
            </summary>
        </member>
        <member name="T:Consul.AuthMethod">
            <summary>
            AuthMethod can be used to query the ACL Auth Method endpoints
            </summary>
        </member>
        <member name="M:Consul.AuthMethod.Create(Consul.AuthMethodEntry,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL AuthMethod in Consul
            </summary>
            <param name="authMethod">The new ACL AuthMethod</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL AuthMethod</returns>
        </member>
        <member name="M:Consul.AuthMethod.Create(Consul.AuthMethodEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL AuthMethod in Consul
            </summary>
            <param name="authMethod">The new ACL AuthMethod</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL AuthMethod</returns>
        </member>
        <member name="M:Consul.AuthMethod.Update(Consul.AuthMethodEntry,System.Threading.CancellationToken)">
            <summary>
            Updates and existing ACL AuthMethod in Consul
            </summary>
            <param name="authMethod">The modified ACL AuthMethod</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL AuthMethod</returns>
        </member>
        <member name="M:Consul.AuthMethod.Update(Consul.AuthMethodEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Updates an existing ACL AuthMethod in Consul
            </summary>
            <param name="authMethod">The modified ACL AuthMethod</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL AuthMethod</returns>
        </member>
        <member name="M:Consul.AuthMethod.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing ACL AuthMethod from Consul
            </summary>
            <param name="name">The name of the ACL AuthMethod to delete</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.AuthMethod.Delete(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing ACL AuthMethod from Consul
            </summary>
            <param name="name">The name of the ACL AuthMethod to delete</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.AuthMethod.Read(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an existing ACL AuthMethod from Consul
            </summary>
            <param name="name">The Name of the ACL AuthMethod to get</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL AuthMethod</returns>
        </member>
        <member name="M:Consul.AuthMethod.Read(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Gets an existing ACL AuthMethod from Consul
            </summary>
            <param name="name">The Name of the ACL AuthMethod to get</param>
            <param name="queryOptions">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL AuthMethod</returns>
        </member>
        <member name="M:Consul.AuthMethod.List(System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL AuthMethods in Consul
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL AuthMethods</returns>
        </member>
        <member name="M:Consul.AuthMethod.List(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL AuthMethods in Consul
            </summary>
            <param name="queryOptions">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL AuthMethods</returns>
        </member>
        <member name="M:Consul.AuthMethod.Login(System.Threading.CancellationToken)">
            <summary>
            Login to ACL Auth Method
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing an ACL Token for the login</returns>
        </member>
        <member name="M:Consul.AuthMethod.Login(Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Login to ACL Auth Method
            </summary>
            <param name="writeOptions"></param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>>A write result containing an ACL Token for the login</returns>
        </member>
        <member name="M:Consul.AuthMethod.Logout(System.Threading.CancellationToken)">
            <summary>
            Logout from ACL Auth Method
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result</returns>
        </member>
        <member name="M:Consul.AuthMethod.Logout(Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Logout from ACL Auth Method
            </summary>
            <param name="writeOptions"></param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result</returns>
        </member>
        <member name="T:Consul.Catalog">
            <summary>
            Catalog can be used to query the Catalog endpoints
            </summary>
        </member>
        <member name="M:Consul.Catalog.Register(Consul.CatalogRegistration,System.Threading.CancellationToken)">
            <summary>
            Register a new catalog item
            </summary>
            <param name="reg">A catalog registration</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Catalog.Register(Consul.CatalogRegistration,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Register a new catalog item
            </summary>
            <param name="reg">A catalog registration</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Catalog.Deregister(Consul.CatalogDeregistration,System.Threading.CancellationToken)">
            <summary>
            Deregister an existing catalog item
            </summary>
            <param name="reg">A catalog deregistration</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Catalog.Deregister(Consul.CatalogDeregistration,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Deregister an existing catalog item
            </summary>
            <param name="reg">A catalog deregistration</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Catalog.Datacenters(System.Threading.CancellationToken)">
            <summary>
            Datacenters is used to query for all the known datacenters
            </summary>
            <returns>A list of datacenter names</returns>
        </member>
        <member name="M:Consul.Catalog.Datacenters(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Datacenters is used to query for all the known datacenters with custom query options
            </summary>
            <returns>A list of datacenter names</returns>
        </member>
        <member name="M:Consul.Catalog.Nodes(System.Threading.CancellationToken)">
            <summary>
            Nodes is used to query all the known nodes
            </summary>
            <returns>A list of all nodes</returns>
        </member>
        <member name="M:Consul.Catalog.Nodes(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Nodes is used to query all the known nodes
            </summary>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of all nodes</returns>
        </member>
        <member name="M:Consul.Catalog.Services(System.Threading.CancellationToken)">
            <summary>
            Services is used to query for all known services
            </summary>
            <returns>A list of all services</returns>
        </member>
        <member name="M:Consul.Catalog.Services(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Services is used to query for all known services
            </summary>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of all services</returns>
        </member>
        <member name="M:Consul.Catalog.Service(System.String,System.Threading.CancellationToken)">
            <summary>
            Service is used to query catalog entries for a given service
            </summary>
            <param name="service">The service ID</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of service instances</returns>
        </member>
        <member name="M:Consul.Catalog.Service(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Service is used to query catalog entries for a given service
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">A tag to filter on</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of service instances</returns>
        </member>
        <member name="M:Consul.Catalog.Service(System.String,System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Service is used to query catalog entries for a given service
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">A tag to filter on</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of service instances</returns>
        </member>
        <member name="M:Consul.Catalog.NodesForMeshCapableService(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the nodes providing a mesh-capable service in a given datacenter. 
            </summary>
            <param name="service">The service ID</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of service instances</returns>
        </member>
        <member name="M:Consul.Catalog.NodesForMeshCapableService(System.String,Consul.Filtering.Filter,System.Threading.CancellationToken)">
            <summary>
            Returns the nodes providing a mesh-capable service in a given datacenter.
            </summary>
            <param name="service">The service ID</param>
            <param name="filter">Specifies the expression used to filter the queries results prior to returning the data</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of service instances</returns>
        </member>
        <member name="M:Consul.Catalog.NodesForMeshCapableService(System.String,Consul.QueryOptions,Consul.Filtering.Filter,System.Threading.CancellationToken)">
            <summary>
            Returns the nodes providing a mesh-capable service in a given datacenter.
            </summary>
            <param name="service">The service ID</param>
            <param name="q">Customized Query options</param>
            <param name="filter">Specifies the expression used to filter the queries results prior to returning the data</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A list of service instances</returns>
        </member>
        <member name="M:Consul.Catalog.Node(System.String,System.Threading.CancellationToken)">
            <summary>
            Node is used to query for service information about a single node
            </summary>
            <param name="node">The node name</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The node information including a list of services</returns>
        </member>
        <member name="M:Consul.Catalog.Node(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Node is used to query for service information about a single node
            </summary>
            <param name="node">The node name</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The node information including a list of services</returns>
        </member>
        <member name="M:Consul.Catalog.ServicesForNode(System.String,System.Threading.CancellationToken)">
            <summary>
            ServicesForNode is used to query for the services provided by a node
            </summary>
            <param name="node">Node Name</param>
            <param name="ct">CancellationToken</param>
            <returns>Node Services</returns>
        </member>
        <member name="M:Consul.Catalog.ServicesForNode(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            ServicesForNode is used to query for the services provided by a node
            </summary>
            <param name="node">Node Name</param>
            <param name="q">Query Parameters</param>
            <param name="ct">Cancellation Token</param>
            <returns>Node Services</returns>
        </member>
        <member name="M:Consul.Catalog.GatewayService(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            GatewayServices is used to query for the services associated with an ingress gateway or terminating gateway
            </summary>
            <param name="gateway">Gateway name</param>
            <param name="q">Query Parameters</param>
            <param name="ct">Cancellation Token</param>
            <returns>Gateway services</returns>
        </member>
        <member name="M:Consul.Catalog.GatewayService(System.String,System.Threading.CancellationToken)">
            <summary>
            GatewayServices is used to query for the services associated with an ingress gateway or terminating gateway
            </summary>
            <param name="gateway">Gateway name</param>
            <param name="ct">Cancellation Token</param>
            <returns>Gateway services</returns>
        </member>
        <member name="T:Consul.ConsulClientConfiguration">
            <summary>
            Represents the configuration options for a Consul client.
            </summary>
        </member>
        <member name="P:Consul.ConsulClientConfiguration.Address">
            <summary>
            The Uri to connect to the Consul agent.
            </summary>
        </member>
        <member name="P:Consul.ConsulClientConfiguration.Namespace">
            <summary>
            Namespace is the name of the namespace to send along for the request
            when no other Namespace is present in the QueryOptions
            </summary>
        </member>
        <member name="P:Consul.ConsulClientConfiguration.Datacenter">
            <summary>
            Datacenter to provide with each request. If not provided, the default agent datacenter is used.
            </summary>
        </member>
        <member name="P:Consul.ConsulClientConfiguration.HttpAuth">
            <summary>
            Credentials to use for access to the HTTP API.
            This is only needed if an authenticating service exists in front of Consul; Token is used for ACL authentication by Consul.
            </summary>
        </member>
        <member name="P:Consul.ConsulClientConfiguration.ClientCertificate">
            <summary>
            TLS Client Certificate used to secure a connection to a Consul agent. Not supported on Mono.
            This is only needed if an authenticating service exists in front of Consul; Token is used for ACL authentication by Consul. This is not the same as RPC Encryption with TLS certificates.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">Setting this property will throw a PlatformNotSupportedException on Mono</exception>
        </member>
        <member name="P:Consul.ConsulClientConfiguration.Token">
            <summary>
            Token is used to provide an ACL token which overrides the agent's default token. This ACL token is used for every request by
            clients created using this configuration.
            </summary>
        </member>
        <member name="P:Consul.ConsulClientConfiguration.WaitTime">
            <summary>
            WaitTime limits how long a Watch will block. If not provided, the agent default values will be used.
            </summary>
        </member>
        <member name="M:Consul.ConsulClientConfiguration.#ctor">
            <summary>
            Creates a new instance of a Consul client configuration.
            </summary>
            <exception cref="T:Consul.ConsulConfigurationException">An error that occured while building the configuration.</exception>
        </member>
        <member name="M:Consul.ConsulClientConfiguration.ConfigureFromEnvironment(System.UriBuilder)">
            <summary>
            Builds configuration based on environment variables.
            </summary>
            <exception cref="T:Consul.ConsulConfigurationException">An environment variable could not be parsed</exception>
        </member>
        <member name="T:Consul.DeleteReturnRequest`1">
            <summary>
            Performs a DELETE to API endpoints in Consul, returning a generic type
            </summary>
            <typeparam name="TOut">A generic type to be deserialised and returned</typeparam>
        </member>
        <member name="M:Consul.DeleteReturnRequest`1.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the DELETE request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the DELETE, including a deserialised generic type object</returns>
        </member>
        <member name="T:Consul.DeleteRequest">
            <summary>
            Performs a DELETE to API endpoints in Consul
            </summary>
        </member>
        <member name="M:Consul.DeleteRequest.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the DELETE request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the DELETE</returns>
        </member>
        <member name="T:Consul.DeleteAcceptingRequest`1">
            <summary>
            Performs a DELETE to API endpoints in Consul
            </summary>
            <typeparam name="TIn">A generic type to be serialised and sent with the DELETE</typeparam>
        </member>
        <member name="M:Consul.DeleteAcceptingRequest`1.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the DELETE request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the DELETE</returns>
        </member>
        <member name="T:Consul.ConsulRequestException">
            <summary>
            Represents errors that occur while sending data to or fetching data from the Consul agent.
            </summary>
        </member>
        <member name="T:Consul.ConsulConfigurationException">
            <summary>
            Represents errors that occur during initalization of the Consul client's configuration.
            </summary>
        </member>
        <member name="T:Consul.GetRequest`1">
            <summary>
            Performs a GET to API endpoints in Consul, returning a generic type
            </summary>
            <typeparam name="TOut">A generic type to be deserialised and returned</typeparam>
        </member>
        <member name="M:Consul.GetRequest`1.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the GET request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the GET, including a deserialised generic type object</returns>
        </member>
        <member name="M:Consul.GetRequest`1.ExecuteStreaming(System.Threading.CancellationToken)">
            <summary>
            Execute the GET request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the GET, including a stream of data</returns>
        </member>
        <member name="T:Consul.GetRequest">
            <summary>
            Performs a GET to API endpoints in Consul
            </summary>
        </member>
        <member name="M:Consul.GetRequest.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the GET request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The results of the GET, including a string of returned data</returns>
        </member>
        <member name="T:Consul.QueryOptions">
            <summary>
            QueryOptions are used to parameterize a query
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.Namespace">
            <summary>
            Namespace is the name of the namespace to send along for the request when no other Namespace is present in the QueryOptions.
            Namespace is an Enterprise-only feature.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.Datacenter">
            <summary>
            Providing a datacenter overwrites the DC provided by the Config.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.Consistency">
            <summary>
            The consistency level required for the operation.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.UseCache">
            <summary>
            WaitIndex is used to enable a blocking query. Waits until the timeout or the next index is reached.
            UseCache requests that the agent cache results locally.
            See https://www.consul.io/api/features/caching.html for more details on the semantics.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.MaxAge">
            <summary>
            MaxAge limits how old a cached value will be returned if UseCache is true.
            If there is a cached response that is older than the MaxAge, it is treated as a cache miss and a new fetch invoked.
            If the fetch fails, the error is returned.
            Clients that wish to allow for stale results on error can set StaleIfError to a longer duration to change this behavior.
            It is ignored if the endpoint supports background refresh caching.
            See https://www.consul.io/api/features/caching.html for more details.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.StaleIfError">
            <summary>
            StaleIfError specifies how stale the client will accept a cached response if the servers are unavailable to fetch a fresh one.
            Only makes sense when UseCache is true and MaxAge is set to a lower, non-zero value.
            It is ignored if the endpoint supports background refresh caching.
            See https://www.consul.io/api/features/caching.html for more details.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.WaitIndex">
            <summary>
            WaitIndex is used to enable a blocking query. Waits until the timeout or the next index is reached
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.WaitTime">
            <summary>
            WaitTime is used to bound the duration of a wait. Defaults to that of the Config, but can be overridden.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.Token">
            <summary>
            Token is used to provide a per-request ACL token which overrides the agent's default token.
            </summary>
        </member>
        <member name="P:Consul.QueryOptions.Near">
            <summary>
            Near is used to provide a node name that will sort the results
            in ascending order based on the estimated round trip time from
            that node. Setting this to "_agent" will use the agent's node
            for the sort.
            </summary>
        </member>
        <member name="T:Consul.WriteOptions">
            <summary>
            WriteOptions are used to parameterize a write
            </summary>
        </member>
        <member name="P:Consul.WriteOptions.Namespace">
            <summary>
            Namespace is the name of the namespace to send along for the request when no other Namespace is present in the QueryOptions
            Namespace is an Enterprise-only feature.
            </summary>
        </member>
        <member name="P:Consul.WriteOptions.Datacenter">
            <summary>
            Providing a datacenter overwrites the DC provided by the Config
            </summary>
        </member>
        <member name="P:Consul.WriteOptions.Token">
            <summary>
            Token is used to provide a per-request ACL token which overrides the agent's default token.
            </summary>
        </member>
        <member name="T:Consul.PostReturningRequest`1">
            <summary>
            Performs a POST to API endpoints in Consul, returning a generic type
            </summary>
            <typeparam name="TOut">A generic type to be deserialised and returned</typeparam>
        </member>
        <member name="M:Consul.PostReturningRequest`1.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the POST request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the POST, including a deserialised generic type object</returns>
        </member>
        <member name="T:Consul.PostRequest`1">
            <summary>
            Performs a POST to API endpoints in Consul, sending a generic type
            </summary>
            <typeparam name="TIn">A generic type to be serialised and sent with the delete</typeparam>
        </member>
        <member name="M:Consul.PostRequest`1.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the POST request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the POST</returns>
        </member>
        <member name="T:Consul.PostRequest`2">
            <summary>
            Performs a POST to API endpoints in Consul, sending and returning generic types
            </summary>
            <typeparam name="TIn">A generic type to be serialised and sent with the POST</typeparam>
            <typeparam name="TOut">A generic type to be deserialised and returned</typeparam>
        </member>
        <member name="M:Consul.PostRequest`2.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the POST request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the POST, including a deserialised generic type object</returns>
        </member>
        <member name="T:Consul.PostRequest">
            <summary>
            Performs a POST to API endpoints in Consul
            </summary>
        </member>
        <member name="M:Consul.PostRequest.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the POST request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the POST, including a string of data</returns>
        </member>
        <member name="T:Consul.PutReturningRequest`1">
            <summary>
            Performs a PUT to API endpoints in Consul, returning a generic type
            </summary>
            <typeparam name="TOut">A generic type to be deserialised and returned</typeparam>
        </member>
        <member name="M:Consul.PutReturningRequest`1.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the PUT request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the PUT, including a deserialised generic type object</returns>
        </member>
        <member name="T:Consul.PutNothingRequest">
            <summary>
            Performs a PUT to API endpoints in Consul
            </summary>
        </member>
        <member name="M:Consul.PutNothingRequest.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the PUT request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the PUT</returns>
        </member>
        <member name="T:Consul.PutRequest`1">
            <summary>
            Performs a PUT to API endpoints in Consul, sending a generic type
            </summary>
            <typeparam name="TIn">A generic type to be serialised and sent</typeparam>
        </member>
        <member name="M:Consul.PutRequest`1.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the PUT request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the PUT</returns>
        </member>
        <member name="T:Consul.PutRequest`2">
            <summary>
            Performs a PUT to API endpoints in Consul, sending and returning generic types
            </summary>
            <typeparam name="TIn">A generic type to be serialised and sent</typeparam>
            <typeparam name="TOut">A generic type to be deserialised and returned</typeparam>
        </member>
        <member name="M:Consul.PutRequest`2.Execute(System.Threading.CancellationToken)">
            <summary>
            Execute the PUT request to the API
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The result of the PUT, including a deserialised generic type object</returns>
        </member>
        <member name="T:Consul.ConsistencyMode">
            <summary>
            The consistency mode of a request.
            </summary>
            <remarks>
            <seealso href="http://www.consul.io/docs/agent/http.html"/>
            </remarks>
        </member>
        <member name="F:Consul.ConsistencyMode.Default">
            <summary>
            Default is strongly consistent in almost all cases. However, there is a small window in which a new leader may be elected during which the old leader may service stale values. The trade-off is fast reads but potentially stale values. The condition resulting in stale reads is hard to trigger, and most clients should not need to worry about this case. Also, note that this race condition only applies to reads, not writes.
            </summary>
        </member>
        <member name="F:Consul.ConsistencyMode.Consistent">
            <summary>
            Consistent forces the read to be fully consistent. This mode is strongly consistent without caveats. It requires that a leader verify with a quorum of peers that it is still leader. This introduces an additional round-trip to all server nodes. The trade-off is increased latency due to an extra round trip. Most clients should not use this unless they cannot tolerate a stale read.
            </summary>
        </member>
        <member name="F:Consul.ConsistencyMode.Stale">
            <summary>
            Stale allows any Consul server (non-leader) to service a read. This mode allows any server to service the read regardless of whether it is the leader. This means reads can be arbitrarily stale; however, results are generally consistent to within 50 milliseconds of the leader. The trade-off is very fast and scalable reads with a higher likelihood of stale values. Since this mode allows reads without a leader, a cluster that is unavailable will still be able to respond to queries.
            </summary>
        </member>
        <member name="P:Consul.ConsulResult.RequestTime">
            <summary>
            How long the request took
            </summary>
        </member>
        <member name="P:Consul.ConsulResult.StatusCode">
            <summary>
            Exposed so that the consumer can to check for a specific status code
            </summary>
        </member>
        <member name="T:Consul.QueryResult">
            <summary>
            The result of a Consul API query
            </summary>
        </member>
        <member name="P:Consul.QueryResult.XCache">
            <summary>
            In all cases the HTTP `X-Cache` header is always set in the response to either `HIT` or `MISS` indicating whether the response was served from cache or not.
            </summary>
        </member>
        <member name="P:Consul.QueryResult.Age">
            <summary>
            For cache hits, the HTTP `Age` header is always set in the response to indicate how many seconds since that response was fetched from the servers.
            As long as the local agent has an active connection to the servers, the age will always be 0 since the value is up-to-date.
            </summary>
        </member>
        <member name="P:Consul.QueryResult.LastIndex">
            <summary>
            The index number when the query was serviced. This can be used as a WaitIndex to perform a blocking query
            </summary>
        </member>
        <member name="P:Consul.QueryResult.LastContact">
            <summary>
            Time of last contact from the leader for the server servicing the request
            </summary>
        </member>
        <member name="P:Consul.QueryResult.KnownLeader">
            <summary>
            Is there a known leader
            </summary>
        </member>
        <member name="P:Consul.QueryResult.AddressTranslationEnabled">
            <summary>
            Is address translation enabled for HTTP responses on this agent
            </summary>
        </member>
        <member name="T:Consul.QueryResult`1">
            <summary>
            The result of a Consul API query
            </summary>
            <typeparam name="T">Must be able to be deserialized from JSON</typeparam>
        </member>
        <member name="P:Consul.QueryResult`1.Response">
            <summary>
            The result of the query
            </summary>
        </member>
        <member name="T:Consul.WriteResult">
            <summary>
            The result of a Consul API write
            </summary>
        </member>
        <member name="T:Consul.WriteResult`1">
            <summary>
            The result of a Consul API write
            </summary>
            <typeparam name="T">Must be able to be deserialized from JSON. Some writes return nothing, in which case this should be an empty Object</typeparam>
        </member>
        <member name="P:Consul.WriteResult`1.Response">
            <summary>
            The result of the write
            </summary>
        </member>
        <member name="T:Consul.JWTProviderEntry">
            <summary>
            The JWTProviderEntry configures Consul to use a JSON Web Token (JWT) and JSON Web Key Set (JWKS) in order to add JWT validation to proxies in the service mesh.
            </summary>
        </member>
        <member name="T:Consul.IngressGatewayEntry">
            <summary>
            IngressGatewayEntry provides configuration for the Ingress Gateway Proxy
            </summary>
        </member>
        <member name="T:Consul.InlineCertificateEntry">
            <summary>
            The InlineCertificateEntry configures the gateway inline certificate configuration entry
            </summary>
        </member>
        <member name="T:Consul.TcpRouteEntry">
            <summary>
            The TcpRouteEntry configures TCP route resources.
            </summary>
        </member>
        <member name="T:Consul.HttpRouteEntry">
            <summary>
            The HttpRouteEntry configures HTTP route resources.
            </summary>
        </member>
        <member name="T:Consul.ApiGatewayEntry">
            <summary>
             Configures the API gateway configuration entry that you can deploy to networks in virtual machine (VM) environments.
            </summary>
        </member>
        <member name="T:Consul.ControlPlaneRequestLimitEntry">
            <summary>
            Configuration options for the control-plane-request-limit configuration entry
            </summary>
        </member>
        <member name="T:Consul.TerminatingGatewayEntry">
            <summary>
            Configures terminating gateways to proxy traffic from services in the Consul service mesh to services registered with Consul that do not have a service mesh sidecar proxy
            </summary>
        </member>
        <member name="T:Consul.ServiceSplitterEntry">
            <summary>
            Configures and apply service splitters to redirect a percentage of incoming traffic requests for a service to one or more specific service instances.
            </summary>
        </member>
        <member name="T:Consul.ServiceRouterEntry">
            <summary>
            Service routers use L7 network information to redirect a traffic request for a service to one or more specific service instances.
            </summary>
        </member>
        <member name="T:Consul.ServiceResolverEntry">
            <summary>
            Configures and apply service resolvers to create named subsets of service instances and define their behavior when satisfying upstream requests.
            </summary>
        </member>
        <member name="T:Consul.ServiceIntentionsEntry">
            <summary>
            Configures control access between services in the service mesh.
            </summary>
        </member>
        <member name="T:Consul.SamenessGroupEntry">
            <summary>
            Sameness groups associate identical admin partitions to facilitate traffic between identical services.
            </summary>
        </member>
        <member name="T:Consul.ProxyDefaultEntry">
            <summary>
            Proxy defaults configuration entries set global passthrough Envoy settings for proxies in the service mesh, including sidecars and gateways.
            </summary>
        </member>
        <member name="T:Consul.ExportedServiceEntry">
            <summary>
            The Exported Service configuration entry enables Consul to export service instances to other clusters from a single file and connect services across clusters.
            </summary>
        </member>
        <member name="T:Consul.MeshEntry">
            <summary>
            The mesh configuration entry allows you to define a global default configuration that applies to all service mesh proxies.
            </summary>
        </member>
        <member name="T:Consul.ServiceDefaultsEntry">
            <summary>
            The service defaults configuration entry contains common configuration settings for service mesh services, such as upstreams and gateways.
            </summary>
        </member>
        <member name="M:Consul.Configuration.ApplyConfig``1(Consul.WriteOptions,``0,System.Threading.CancellationToken)">
            <summary>
             This creates or updates the given config entry.
            </summary>
            <param name="q">Write Options</param>
            <param name="configurationEntry">The configuration entry</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Configuration.ApplyConfig``1(``0,System.Threading.CancellationToken)">
            <summary>
             This creates or updates the given config entry.
            </summary>
            <param name="configurationEntry">The configuration entry</param>
            <param name="ct">The cancellation token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Configuration.GetConfig``1(System.String,System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            This Retrieves the given config entry.
            </summary>
            <typeparam name="TConfig"></typeparam>
            <param name="kind">The kind of config entry</param>
            <param name="name">The name of config entry</param>
            <param name="q">Query Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>A config entry</returns>
        </member>
        <member name="M:Consul.Configuration.GetConfig``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This Retrieves the given config entry.
            </summary>
            <typeparam name="TConfig"></typeparam>
            <param name="kind">The kind of config entry</param>
            <param name="name">The name of config entry</param>
            <param name="ct">Cancellation Token</param>
            <returns>A config entry</returns>
        </member>
        <member name="M:Consul.Configuration.ListConfig``1(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            This Retrieves the list of config for an entry kind.
            </summary>
            <typeparam name="TConfig"></typeparam>
            <param name="kind">The kind of config entry</param>
            <param name="q">Query Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>A config entry</returns>
        </member>
        <member name="M:Consul.Configuration.ListConfig``1(System.String,System.Threading.CancellationToken)">
            <summary>
            This Retrieves the list of config for an entry kind.
            </summary>
            <typeparam name="TConfig"></typeparam>
            <param name="kind">The kind of config entry</param>
            <param name="ct">Cancellation Token</param>
            <returns>A list of config entries</returns>
        </member>
        <member name="M:Consul.Configuration.DeleteConfig(System.String,System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            This Deletes the given config entry.
            </summary>
            <param name="kind">The kind of config entry</param>
            <param name="name">The name of config entry</param>
            <param name="q">Write Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>A Write Result</returns>
        </member>
        <member name="M:Consul.Configuration.DeleteConfig(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This Deletes the given config entry.
            </summary>
            <param name="kind">The kind of config entry</param>
            <param name="name">The name of config entry</param>
            <param name="ct">Cancellation Token</param>
            <returns>A config entry</returns>
        </member>
        <member name="M:Consul.Connect.CARoots(System.Threading.CancellationToken)">
            <summary>
            CARoots queries the list of available roots.
            </summary>
        </member>
        <member name="M:Consul.Connect.CARoots(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            CARoots queries the list of available roots.
            </summary>
        </member>
        <member name="M:Consul.Coordinate.Datacenters(System.Threading.CancellationToken)">
            <summary>
            Datacenters is used to return the coordinates of all the servers in the WAN pool.
            </summary>
            <returns>A query result containing a map of datacenters, each with a list of coordinates of all the servers in the WAN pool</returns>
        </member>
        <member name="M:Consul.Coordinate.Nodes(System.Threading.CancellationToken)">
            <summary>
            Nodes is used to return the coordinates of all the nodes in the LAN pool.
            </summary>
            <returns>A query result containing coordinates of all the nodes in the LAN pool</returns>
        </member>
        <member name="M:Consul.Coordinate.Nodes(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Nodes is used to return the coordinates of all the nodes in the LAN pool.
            </summary>
            <param name="q">Customized query options</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing coordinates of all the nodes in the LAN pool</returns>
        </member>
        <member name="M:Consul.Coordinate.Node(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Node returns the coordinates of a given node in the LAN pool.
            </summary>
            <param name="node">The node to query</param>"
            <param name="ct">The cancellation token</param>"
            <param name="q">Customized query options</param>"
            <returns>Node is used to return the coordinates of a given node in the LAN pool.</returns>
        </member>
        <member name="M:Consul.Coordinate.Update(Consul.CoordinateEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Updates the LAN network coordinates for a node in a given datacenter.
            </summary>
            <param name="entry">The coordinate entry to update</param>
            <param name="q">Customized write options</param>
            <param name="ct">Cancellation Token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.Coordinate.Update(Consul.CoordinateEntry,System.Threading.CancellationToken)">
            <summary>
            Updates the LAN network coordinates for a node in a given datacenter.
            </summary>
            <param name="entry">The coordinate entry to update</param>
            <param name="ct">Cancellation Token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="P:Consul.DiscoveryChainOptions.OverrideMeshGateway">
            <summary>
            OverrideMeshGateway allows for the mesh gateway setting to be overridden
            For any resolver in the compiled chain.
            </summary>
        </member>
        <member name="P:Consul.DiscoveryChainOptions.OverrideProtocol">
             <summary>
             OverrideProtocol allows for the final protocol for the chain to be
             altered.
            
             - If the chain ordinarily would be TCP and an L7 protocol is passed here
             the chain will not include Routers or Splitters.
            
             - If the chain ordinarily would be L7 and TCP is passed here the chain
             will not include Routers or Splitters.
             </summary>
        </member>
        <member name="P:Consul.DiscoveryChainOptions.OverrideConnectTimeout">
            <summary>
            OverrideConnectTimeout allows for the ConnectTimeout setting to be
            Overridden for any resolver in the compiled chain.
            </summary>
        </member>
        <member name="M:Consul.DiscoveryChain.Get(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Get is used to return the compiled discovery chain for a service.
            </summary>
            <param name="name">Specifies the service to query when compiling the discovery chain</param>
            <param name="q">Query Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.DiscoveryChain.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Get is used to return the compiled discovery chain for a service.
            </summary>
            <param name="name">Specifies the service to query when compiling the discovery chain</param>
            <param name="ct">Cancellation Token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.DiscoveryChain.Get(System.String,Consul.DiscoveryChainOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            Get is used to return the compiled discovery chain for a service.
            </summary>
            <param name="name">Name of the service</param>
            <param name="options">Discovery Chain Options</param>
            <param name="ct">Cancellation Token</param>
            <param name="compileDataCenter">Datacenter to evaluate the discovery chain in</param>
            <returns>An empty write result</returns>
        </member>
        <member name="M:Consul.DiscoveryChain.Get(System.String,Consul.DiscoveryChainOptions,Consul.WriteOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            Get is used to return the compiled discovery chain for a service.
            </summary>
            <param name="name">Name of the service</param>
            <param name="options">Discovery Chain Options</param>
            <param name="compileDataCenter">Datacenter to evaluate the discovery chain in</param>
            <param name="q">Write Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>An empty write result</returns>
        </member>
        <member name="T:Consul.UserEvent">
            <summary>
            UserEvent represents an event that was fired by the user
            </summary>
        </member>
        <member name="M:Consul.Event.Fire(Consul.UserEvent,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Fire is used to fire a new user event. Only the Name, Payload and Filters are respected. This returns the ID or an associated error. Cross DC requests are supported.
            </summary>
            <param name="ue">A User Event definition</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Consul.Event.List(System.Threading.CancellationToken)">
            <summary>
            List is used to get the most recent events an agent has received. This list can be optionally filtered by the name. This endpoint supports quasi-blocking queries. The index is not monotonic, nor does it provide provide LastContact or KnownLeader.
            </summary>
            <returns>An array of events</returns>
        </member>
        <member name="M:Consul.Event.List(System.String,System.Threading.CancellationToken)">
            <summary>
            List is used to get the most recent events an agent has received. This list can be optionally filtered by the name. This endpoint supports quasi-blocking queries. The index is not monotonic, nor does it provide provide LastContact or KnownLeader.
            </summary>
            <param name="name">The name of the event to filter for</param>
            <param name="ct">The cancellation token</param>
            <returns>An array of events</returns>
        </member>
        <member name="M:Consul.Event.List(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            List is used to get the most recent events an agent has received. This list can be optionally filtered by the name. This endpoint supports quasi-blocking queries. The index is not monotonic, nor does it provide provide LastContact or KnownLeader.
            </summary>
            <param name="name">The name of the event to filter for</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>An array of events</returns>
        </member>
        <member name="M:Consul.Event.IDToIndex(System.String)">
            <summary>
            IDToIndex is a bit of a hack. This simulates the index generation to convert an event ID into a WaitIndex.
            </summary>
            <param name="uuid">The Event UUID</param>
            <returns>A "wait index" generated from the UUID</returns>
        </member>
        <member name="T:Consul.HealthStatus">
            <summary>
            The status of a health check
            </summary>
        </member>
        <member name="T:Consul.HealthCheck">
            <summary>
            HealthCheck is used to represent a single check
            </summary>
        </member>
        <member name="T:Consul.ServiceEntry">
            <summary>
            ServiceEntry is used for the health service endpoint
            </summary>
        </member>
        <member name="T:Consul.Health">
            <summary>
            Health can be used to query the Health endpoints
            </summary>
        </member>
        <member name="M:Consul.Health.Checks(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks is used to return the checks associated with a service
            </summary>
            <param name="service">The service ID</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the health checks matching the provided service ID, or a query result with a null response if no service matched the provided ID</returns>
        </member>
        <member name="M:Consul.Health.Checks(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Checks is used to return the checks associated with a service
            </summary>
            <param name="service">The service ID</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the health checks matching the provided service ID, or a query result with a null response if no service matched the provided ID</returns>
        </member>
        <member name="M:Consul.Health.Node(System.String,System.Threading.CancellationToken)">
            <summary>
            Node is used to query for checks belonging to a given node
            </summary>
            <param name="node">The node name</param>
            <param name="ct">The cancellation token</param>"
            <returns>A query result containing the health checks matching the provided node ID, or a query result with a null response if no node matched the provided ID</returns>
        </member>
        <member name="M:Consul.Health.Node(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Node is used to query for checks belonging to a given node
            </summary>
            <param name="node">The node name</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the health checks matching the provided node ID, or a query result with a null response if no node matched the provided ID</returns>
        </member>
        <member name="M:Consul.Health.Service(System.String,System.Threading.CancellationToken)">
            <summary>
            Service is used to query health information along with service info for a given service. It can optionally do server-side filtering on a tag or nodes with passing health checks only.
            </summary>
            <param name="service">The service ID</param>
            <param name="ct">The cancellation token</param>"
            <returns>A query result containing the service members matching the provided service ID, or a query result with a null response if no service members matched the filters provided</returns>
        </member>
        <member name="M:Consul.Health.Service(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Service is used to query health information along with service info for a given service. It can optionally do server-side filtering on a tag or nodes with passing health checks only.
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="ct">The cancellation token</param>"
            <returns>A query result containing the service members matching the provided service ID and tag, or a query result with a null response if no service members matched the filters provided</returns>
        </member>
        <member name="M:Consul.Health.Service(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Service is used to query health information along with service info for a given service. It can optionally do server-side filtering on a tag or nodes with passing health checks only.
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="ct">The cancellation token</param>"
            <returns>A query result containing the service members matching the provided service ID, tag, and health status, or a query result with a null response if no service members matched the filters provided</returns>
        </member>
        <member name="M:Consul.Health.Service(System.String,System.String,System.Boolean,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Service is used to query health information along with service info for a given service. It can optionally do server-side filtering on a tag or nodes with passing health checks only.
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the service members matching the provided service ID, tag, and health status, or a query result with a null response if no service members matched the filters provided</returns>
        </member>
        <member name="M:Consul.Health.Service(System.String,System.String,System.Boolean,Consul.QueryOptions,Consul.Filtering.Filter,System.Threading.CancellationToken)">
            <summary>
            Service is used to query health information along with service info for a given service. It can optionally do server-side filtering on a tag or nodes with passing health checks only.
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="q">Customized query options</param>
            <param name="filter">Specifies the expression used to filter the queries results prior to returning the data</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the service members matching the provided service ID, tag, and health status, or a query result with a null response if no service members matched the filters provided</returns>
        </member>
        <member name="M:Consul.Health.Connect(System.String,System.String,System.Boolean,Consul.QueryOptions,Consul.Filtering.Filter,System.Threading.CancellationToken)">
            <summary>
            Connect is equivalent to Service, except that it will only return services which are Connect-enabled
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="q">Customized query options</param>
            <param name="filter">Specifies the expression used to filter the queries results prior to returning the data</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>This endpoint returns the connection address for Connect client's to use which may be a proxy in front of the named service</returns>
        </member>
        <member name="M:Consul.Health.Connect(System.String,System.String,System.Boolean,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Service is used to query health information along with service info for a given service. It can optionally do server-side filtering on a tag or nodes with passing health checks only.
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>This endpoint returns the nodes providing a Connect-capable service in a given datacenter, or a query result with a null response</returns>
        </member>
        <member name="M:Consul.Health.Ingress(System.String,System.String,System.Boolean,Consul.QueryOptions,Consul.Filtering.Filter,System.Threading.CancellationToken)">
            <summary>
            Ingress is equivalent to Service and Connect, except that it will only return ingress services
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="q">Customized query options</param>
            <param name="filter">Specifies the expression used to filter the queries results prior to returning the data</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>This endpoint returns the nodes providing an ingress service in a given datacenter, or a query result with a null response</returns>
        </member>
        <member name="M:Consul.Health.Ingress(System.String,System.String,System.Boolean,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Ingress is equivalent to Service and Connect, except that it will only return ingress services
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>This endpoint returns the nodes providing an ingress service in a given datacenter, or a query result with a null response</returns>
        </member>
        <member name="M:Consul.Health.Ingress(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Ingress is equivalent to Service and Connect, except that it will only return ingress services
            </summary>
            <param name="service">The service ID</param>
            <param name="tag">The service member tag</param>
            <param name="passingOnly">Only return if the health check is in the Passing state</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>This endpoint returns the nodes providing an ingress service in a given datacenter, or a query result with a null response</returns>
        </member>
        <member name="M:Consul.Health.State(Consul.HealthStatus,System.Threading.CancellationToken)">
            <summary>
            State is used to retrieve all the checks in a given state. The wildcard "any" state can also be used for all checks.
            </summary>
            <param name="status">The health status to filter for</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing a list of health checks in the specified state, or a query result with a null response if no health checks matched the provided state</returns>
        </member>
        <member name="M:Consul.Health.State(Consul.HealthStatus,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            // State is used to retrieve all the checks in a given state. The wildcard "any" state can also be used for all checks.
            </summary>
            <param name="status">The health status to filter for</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing a list of health checks in the specified state, or a query result with a null response if no health checks matched the provided state</returns>
        </member>
        <member name="T:Consul.IACLEndpoint">
            <summary>
            The interface for the Legacy ACL System API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IACLReplicationEndpoint">
            <summary>
            The interface for the ACL Replication API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IAgentEndpoint">
            <summary>
            The interface for the Agent API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IAuthMethodEndpoint">
            <summary>
            The interface for the ACL Auth Method API Endpoints
            </summary>
        </member>
        <member name="T:Consul.ICatalogEndpoint">
            <summary>
            The interface for the Catalog API Endpoints
            </summary>
        </member>
        <member name="T:Consul.Interfaces.IDiscoveryChainEndpoint">
            <summary>
            The interface for the Discovery Chain API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IConsulClient">
            <summary>
            The interface for the Consul Client
            </summary>
        </member>
        <member name="T:Consul.ICoordinateEndpoint">
            <summary>
            The interface for the Coordinate API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IDistributedLock">
            <summary>
            The interface for the Distributed Lock API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IDistributedSemaphore">
            <summary>
            The interface for the Distributed Semaphore API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IEventEndpoint">
            <summary>
            The interface for the Event API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IHealthEndpoint">
            <summary>
            The interface for the Health API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IKVEndpoint">
            <summary>
            The interface for the Key Value Store API Endpoints
            </summary>
        </member>
        <member name="T:Consul.INamespacesEndpoint">
            <summary>
            The interface for the Namespaces API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IOperatorEndpoint">
            <summary>
            The interface for the Operator API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IPolicyEndpoint">
            <summary>
            The interface for the ACL Policy API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IPreparedQueryEndpoint">
            <summary>
            The interface for the Prepared Query API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IRawEndpoint">
            <summary>
            The interface for the Raw API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IRoleEndpoint">
            <summary>
            The interface for the ACL Role API Endpoints
            </summary>
        </member>
        <member name="T:Consul.ISessionEndpoint">
            <summary>
            The interface for the Session API Endpoints
            </summary>
        </member>
        <member name="T:Consul.ISnapshotEndpoint">
            <summary>
            The interface for the Snapshot API Endpoints
            </summary>
        </member>
        <member name="T:Consul.IStatusEndpoint">
            <summary>
            The interface for the Status API Endpoints
            </summary>
        </member>
        <member name="T:Consul.ITokenEndpoint">
            <summary>
            The interface for the ACL Token API Endpoints
            </summary>
        </member>
        <member name="T:Consul.KVPair">
            <summary>
            KVPair is used to represent a single K/V entry
            </summary>
        </member>
        <member name="T:Consul.KVTxnOp">
            <summary>
            KVTxnOp defines a single operation inside a transaction.
            </summary>
        </member>
        <member name="T:Consul.KVTxnResponse">
            <summary>
            KVTxnResponse  is used to return the results of a transaction.
            </summary>
        </member>
        <member name="T:Consul.InvalidKeyPairException">
            <summary>
            Indicates that the key pair data is invalid
            </summary>
        </member>
        <member name="T:Consul.KV">
            <summary>
            KV is used to manipulate the key/value pair API
            </summary>
        </member>
        <member name="M:Consul.KV.Acquire(Consul.KVPair,System.Threading.CancellationToken)">
            <summary>
            Acquire is used for a lock acquisition operation. The Key, Flags, Value and Session are respected.
            </summary>p.Validate();
            <param name="p">The key/value pair to store in Consul</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the acquisition attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Acquire(Consul.KVPair,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Acquire is used for a lock acquisition operation. The Key, Flags, Value and Session are respected.
            </summary>
            <param name="p">The key/value pair to store in Consul</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the acquisition attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.CAS(Consul.KVPair,System.Threading.CancellationToken)">
            <summary>
            CAS is used for a Check-And-Set operation. The Key, ModifyIndex, Flags and Value are respected. Returns true on success or false on failures.
            </summary>
            <param name="p">The key/value pair to store in Consul</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the write attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.CAS(Consul.KVPair,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            CAS is used for a Check-And-Set operation. The Key, ModifyIndex, Flags and Value are respected. Returns true on success or false on failures.
            </summary>
            <param name="p">The key/value pair to store in Consul</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the write attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete is used to delete a single key.
            </summary>
            <param name="key">The key name to delete</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the delete attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Delete(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Delete is used to delete a single key.
            </summary>
            <param name="key">The key name to delete</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the delete attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.DeleteCAS(Consul.KVPair,System.Threading.CancellationToken)">
            <summary>
            DeleteCAS is used for a Delete Check-And-Set operation. The Key and ModifyIndex are respected. Returns true on success or false on failures.
            </summary>
            <param name="p">The key/value pair to delete</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the delete attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.DeleteCAS(Consul.KVPair,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            DeleteCAS is used for a Delete Check-And-Set operation. The Key and ModifyIndex are respected. Returns true on success or false on failures.
            </summary>
            <param name="p">The key/value pair to delete</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the delete attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.DeleteTree(System.String,System.Threading.CancellationToken)">
            <summary>
            DeleteTree is used to delete all keys under a prefix
            </summary>
            <param name="prefix">The key prefix to delete from</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the recursive delete attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.DeleteTree(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            DeleteTree is used to delete all keys under a prefix
            </summary>
            <param name="prefix">The key prefix to delete from</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the recursiv edelete attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Get is used to lookup a single key
            </summary>
            <param name="key">The key name</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the requested key/value pair, or a query result with a null response if the key does not exist</returns>
        </member>
        <member name="M:Consul.KV.Get(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Get is used to lookup a single key
            </summary>
            <param name="key">The key name</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested key/value pair, or a query result with a null response if the key does not exist</returns>
        </member>
        <member name="M:Consul.KV.Keys(System.String,System.Threading.CancellationToken)">
            <summary>
            Keys is used to list all the keys under a prefix.
            </summary>
            <param name="prefix">The key prefix to filter on</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing a list of key names</returns>
        </member>
        <member name="M:Consul.KV.Keys(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Keys is used to list all the keys under a prefix. Optionally, a separator can be used to limit the responses.
            </summary>
            <param name="prefix">The key prefix to filter on</param>
            <param name="separator">The terminating suffix of the filter - e.g. a separator of "/" and a prefix of "/web/" will match "/web/foo" and "/web/foo/" but not "/web/foo/baz"</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing a list of key names</returns>
        </member>
        <member name="M:Consul.KV.Keys(System.String,System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Keys is used to list all the keys under a prefix. Optionally, a separator can be used to limit the responses.
            </summary>
            <param name="prefix">The key prefix to filter on</param>
            <param name="separator">The terminating suffix of the filter - e.g. a separator of "/" and a prefix of "/web/" will match "/web/foo" and "/web/foo/" but not "/web/foo/baz"</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing a list of key names</returns>
        </member>
        <member name="M:Consul.KV.List(System.String,System.Threading.CancellationToken)">
            <summary>
            List is used to lookup all keys under a prefix
            </summary>
            <param name="prefix">The prefix to search under. Does not have to be a full path - e.g. a prefix of "ab" will find keys "abcd" and "ab11" but not "acdc"</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the keys matching the prefix</returns>
        </member>
        <member name="M:Consul.KV.List(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            List is used to lookup all keys under a prefix
            </summary>
            <param name="prefix">The prefix to search under. Does not have to be a full path - e.g. a prefix of "ab" will find keys "abcd" and "ab11" but not "acdc"</param>
            <param name="q">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns></returns>
        </member>
        <member name="M:Consul.KV.Put(Consul.KVPair,System.Threading.CancellationToken)">
            <summary>
            Put is used to write a new value. Only the Key, Flags and Value properties are respected.
            </summary>
            <param name="p">The key/value pair to store in Consul</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the write attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Put(Consul.KVPair,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Put is used to write a new value. Only the Key, Flags and Value is respected.
            </summary>
            <param name="p">The key/value pair to store in Consul</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the write attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Release(Consul.KVPair,System.Threading.CancellationToken)">
            <summary>
            Release is used for a lock release operation. The Key, Flags, Value and Session are respected.
            </summary>
            <param name="p">The key/value pair to store in Consul</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the release attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Release(Consul.KVPair,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Release is used for a lock release operation. The Key, Flags, Value and Session are respected.
            </summary>
            <param name="p">The key/value pair to store in Consul</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result indicating if the release attempt succeeded</returns>
        </member>
        <member name="M:Consul.KV.Txn(System.Collections.Generic.List{Consul.KVTxnOp},System.Threading.CancellationToken)">
             <summary>
              Txn is used to apply multiple KV operations in a single, atomic transaction.
             </summary>
             <remarks>
             Transactions are defined as a
             list of operations to perform, using the KVOp constants and KVTxnOp structure
             to define operations. If any operation fails, none of the changes are applied
             to the state store. Note that this hides the internal raw transaction interface
             and munges the input and output types into KV-specific ones for ease of use.
             If there are more non-KV operations in the future we may break out a new
             transaction API client, but it will be easy to keep this KV-specific variant
             supported.
            
             Even though this is generally a write operation, we take a QueryOptions input
             and return a QueryMeta output. If the transaction contains only read ops, then
             Consul will fast-path it to a different endpoint internally which supports
             consistency controls, but not blocking. If there are write operations then
             the request will always be routed through raft and any consistency settings
             will be ignored.
            
             // If there is a problem making the transaction request then an error will be
             returned. Otherwise, the ok value will be true if the transaction succeeded
             or false if it was rolled back. The response is a structured return value which
             will have the outcome of the transaction. Its Results member will have entries
             for each operation. Deleted keys will have a nil entry in the, and to save
             space, the Value of each key in the Results will be nil unless the operation
             is a KVGet. If the transaction was rolled back, the Errors member will have
             entries referencing the index of the operation that failed along with an error
             message.
             </remarks>
             <param name="txn">The constructed transaction</param>
             <param name="ct">A CancellationToken to prematurely end the request</param>
             <returns>The transaction response</returns>
        </member>
        <member name="M:Consul.KV.Txn(System.Collections.Generic.List{Consul.KVTxnOp},Consul.WriteOptions,System.Threading.CancellationToken)">
             <summary>
              Txn is used to apply multiple KV operations in a single, atomic transaction.
             </summary>
             <remarks>
             Transactions are defined as a
             list of operations to perform, using the KVOp constants and KVTxnOp structure
             to define operations. If any operation fails, none of the changes are applied
             to the state store. Note that this hides the internal raw transaction interface
             and munges the input and output types into KV-specific ones for ease of use.
             If there are more non-KV operations in the future we may break out a new
             transaction API client, but it will be easy to keep this KV-specific variant
             supported.
            
             Even though this is generally a write operation, we take a QueryOptions input
             and return a QueryMeta output. If the transaction contains only read ops, then
             Consul will fast-path it to a different endpoint internally which supports
             consistency controls, but not blocking. If there are write operations then
             the request will always be routed through raft and any consistency settings
             will be ignored.
            
             // If there is a problem making the transaction request then an error will be
             returned. Otherwise, the ok value will be true if the transaction succeeded
             or false if it was rolled back. The response is a structured return value which
             will have the outcome of the transaction. Its Results member will have entries
             for each operation. Deleted keys will have a nil entry in the, and to save
             space, the Value of each key in the Results will be nil unless the operation
             is a KVGet. If the transaction was rolled back, the Errors member will have
             entries referencing the index of the operation that failed along with an error
             message.
             </remarks>
             <param name="txn">The constructed transaction</param>
             <param name="q">Customized write options</param>
             <param name="ct">A CancellationToken to prematurely end the request</param>
             <returns>The transaction response</returns>
        </member>
        <member name="T:Consul.Lock">
            <summary>
            Lock is used to implement client-side leader election. It is follows the algorithm as described here: https://consul.io/docs/guides/leader-election.html.
            </summary>
        </member>
        <member name="F:Consul.Lock.DefaultLockWaitTime">
            <summary>
            DefaultLockWaitTime is how long we block for at a time to check if lock acquisition is possible. This affects the minimum time it takes to cancel a Lock acquisition.
            </summary>
        </member>
        <member name="F:Consul.Lock.DefaultLockRetryTime">
            <summary>
            DefaultLockRetryTime is how long we wait after a failed lock acquisition before attempting
            to do the lock again. This is so that once a lock-delay is in effect, we do not hot loop
            retrying the acquisition.
            </summary>
        </member>
        <member name="F:Consul.Lock.DefaultMonitorRetryTime">
            <summary>
            DefaultMonitorRetryTime is how long we wait after a failed monitor check
            of a lock (500 response code). This allows the monitor to ride out brief
            periods of unavailability, subject to the MonitorRetries setting in the
            lock options which is by default set to 0, disabling this feature.
            </summary>
        </member>
        <member name="F:Consul.Lock.LockFlagValue">
            <summary>
            LockFlagValue is a magic flag we set to indicate a key is being used for a lock. It is used to detect a potential conflict with a semaphore.
            </summary>
        </member>
        <member name="P:Consul.Lock.IsHeld">
            <summary>
            If the lock is held or not.
            Users of the Lock object should check the IsHeld property before entering the critical section of their code, e.g. in a "while (myLock.IsHeld) {criticalsection}" block.
            Calls to IsHeld are syncronized across threads using a lock, so multiple threads sharing a single Consul Lock will queue up reading the IsHeld property of the lock.
            </summary>
        </member>
        <member name="M:Consul.Lock.Acquire">
            <summary>
            Lock attempts to acquire the lock and blocks while doing so. Not providing a CancellationToken means the thread can block indefinitely until the lock is acquired.
            There is no notification that the lock has been lost, but it may be closed at any time due to session invalidation, communication errors, operator intervention, etc.
            It is NOT safe to assume that the lock is held until Unlock() unless the Session is specifically created without any associated health checks.
            Users of the Lock object should check the IsHeld property before entering the critical section of their code, e.g. in a "while (myLock.IsHeld) {criticalsection}" block.
            By default Consul sessions prefer liveness over safety and an application must be able to handle the lock being lost.
            </summary>
        </member>
        <member name="M:Consul.Lock.Acquire(System.Threading.CancellationToken)">
            <summary>
            Lock attempts to acquire the lock and blocks while doing so.
            Providing a CancellationToken can be used to abort the lock attempt.
            There is no notification that the lock has been lost, but IsHeld may be set to False at any time due to session invalidation, communication errors, operator intervention, etc.
            It is NOT safe to assume that the lock is held until Unlock() unless the Session is specifically created without any associated health checks.
            Users of the Lock object should check the IsHeld property before entering the critical section of their code, e.g. in a "while (myLock.IsHeld) {criticalsection}" block.
            By default Consul sessions prefer liveness over safety and an application must be able to handle the lock being lost.
            </summary>
            <param name="ct">The cancellation token to cancel lock acquisition</param>
        </member>
        <member name="M:Consul.Lock.Release(System.Threading.CancellationToken)">
            <summary>
            Unlock released the lock. It is an error to call this if the lock is not currently held.
            </summary>
        </member>
        <member name="M:Consul.Lock.Destroy(System.Threading.CancellationToken)">
            <summary>
            Destroy is used to cleanup the lock entry. It is not necessary to invoke. It will fail if the lock is in use.
            </summary>
        </member>
        <member name="M:Consul.Lock.MonitorLock">
            <summary>
            MonitorLock is a long running routine to monitor a lock ownership. It sets IsHeld to false if we lose our leadership.
            </summary>
        </member>
        <member name="M:Consul.Lock.CreateSession">
            <summary>
            CreateSession is used to create a new managed session
            </summary>
            <returns>The session ID</returns>
        </member>
        <member name="M:Consul.Lock.LockEntry(System.String)">
            <summary>
            LockEntry returns a formatted KVPair for the lock
            </summary>
            <param name="session">The session ID</param>
            <returns>A KVPair with the lock flag set</returns>
        </member>
        <member name="T:Consul.LockOptions">
            <summary>
            LockOptions is used to parameterize the Lock behavior.
            </summary>
        </member>
        <member name="F:Consul.LockOptions.DefaultLockSessionName">
            <summary>
             DefaultLockSessionName is the Session Name we assign if none is provided
            </summary>
        </member>
        <member name="F:Consul.LockOptions.DefaultLockSessionTTL">
            <summary>
            DefaultLockSessionTTL is the default session TTL if no Session is provided when creating a new Lock. This is used because we do not have another other check to depend upon.
            </summary>
        </member>
        <member name="P:Consul.LockOptions.LockTryOnce">
            <summary>
            When set to false, <see cref="M:Consul.Lock.Acquire"/> will block forever until the lock is acquired. LockWaitTime is ignored in this case.
            <br/>
            When set to true, <see cref="M:Consul.Lock.Acquire"/> the lock within a timestamp (It is analogous to <c>SemaphoreSlim.Wait(Timespan timeout)</c>.
            Under the hood, it attempts to acquire the lock multiple times if needed (due to the HTTP Long Poll returning early),
            and will do so as many times as it can within the bounds set by LockWaitTime.
            If LockWaitTime is set to 0, there will be only single attempt to acquire the lock.
            </summary>
        </member>
        <member name="T:Consul.RaftServer">
            <summary>
            RaftServer has information about a server in the Raft configuration.
            </summary>
        </member>
        <member name="P:Consul.RaftServer.ID">
            <summary>
            ID is the unique ID for the server. These are currently the same
            as the address, but they will be changed to a real GUID in a future
            release of Consul.
            </summary>
        </member>
        <member name="P:Consul.RaftServer.Node">
            <summary>
            Node is the node name of the server, as known by Consul, or this
            will be set to "(unknown)" otherwise.
            </summary>
        </member>
        <member name="P:Consul.RaftServer.Address">
            <summary>
            Address is the IP:port of the server, used for Raft communications.
            </summary>
        </member>
        <member name="P:Consul.RaftServer.Leader">
            <summary>
            Leader is true if this server is the current cluster leader.
            </summary>
        </member>
        <member name="P:Consul.RaftServer.Voter">
            <summary>
            Voter is true if this server has a vote in the cluster. This might
            be false if the server is staging and still coming online, or if
            it's a non-voting server, which will be added in a future release of
            Consul
            </summary>
        </member>
        <member name="T:Consul.RaftConfiguration">
            <summary>
            RaftConfigration is returned when querying for the current Raft configuration.
            </summary>
        </member>
        <member name="P:Consul.RaftConfiguration.Servers">
            <summary>
            Servers has the list of servers in the Raft configuration.
            </summary>
        </member>
        <member name="P:Consul.RaftConfiguration.Index">
            <summary>
            Index has the Raft index of this configuration.
            </summary>
        </member>
        <member name="T:Consul.KeyringResponse">
            <summary>
            KeyringResponse is returned when listing the gossip encryption keys
            </summary>
        </member>
        <member name="P:Consul.KeyringResponse.WAN">
            <summary>
            Whether this response is for a WAN ring
            </summary>
        </member>
        <member name="P:Consul.KeyringResponse.Datacenter">
            <summary>
            The datacenter name this request corresponds to
            </summary>
        </member>
        <member name="P:Consul.KeyringResponse.Keys">
            <summary>
            A map of the encryption keys to the number of nodes they're installed on
            </summary>
        </member>
        <member name="P:Consul.KeyringResponse.NumNodes">
            <summary>
            The total number of nodes in this ring
            </summary>
        </member>
        <member name="P:Consul.AreaRequest.PeerDatacenter">
            <summary>
            PeerDatacenter is the peer Consul datacenter that will make up the
            other side of this network area. Network areas always involve a pair
            of datacenters: the datacenter where the area was created, and the
            peer datacenter. This is required.
            </summary>
        </member>
        <member name="P:Consul.AreaRequest.RetryJoin">
            <summary>
            RetryJoin specifies the address of Consul servers to join to, such as
            an IPs or hostnames with an optional port number. This is optional.
            </summary>
        </member>
        <member name="P:Consul.AreaRequest.UseTLS">
            <summary>
            UseTLS specifies whether gossip over this area should be encrypted with TLS
            if possible.
            </summary>
        </member>
        <member name="P:Consul.Area.ID">
            <summary>
            ID is this identifier for an area (a UUID).
            </summary>
        </member>
        <member name="M:Consul.Operator.#ctor(Consul.ConsulClient)">
            <summary>
            Operator can be used to perform low-level operator tasks for Consul.
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:Consul.Operator.KeyringRequest">
            <summary>
            KeyringRequest is used for performing Keyring operations
            </summary>
        </member>
        <member name="M:Consul.Operator.RaftGetConfiguration(System.Threading.CancellationToken)">
            <summary>
            RaftGetConfiguration is used to query the current Raft peer set.
            </summary>
        </member>
        <member name="M:Consul.Operator.RaftGetConfiguration(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            RaftGetConfiguration is used to query the current Raft peer set.
            </summary>
        </member>
        <member name="M:Consul.Operator.RaftRemovePeerByAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            RaftRemovePeerByAddress is used to kick a stale peer (one that it in the Raft
            quorum but no longer known to Serf or the catalog) by address in the form of
            "IP:port".
            </summary>
        </member>
        <member name="M:Consul.Operator.RaftRemovePeerByAddress(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            RaftRemovePeerByAddress is used to kick a stale peer (one that it in the Raft
            quorum but no longer known to Serf or the catalog) by address in the form of
            "IP:port".
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringInstall(System.String,System.Threading.CancellationToken)">
            <summary>
            KeyringInstall is used to install a new gossip encryption key into the cluster
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringInstall(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            KeyringInstall is used to install a new gossip encryption key into the cluster
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringList(System.Threading.CancellationToken)">
            <summary>
            KeyringList is used to list the gossip keys installed in the cluster
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringList(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            KeyringList is used to list the gossip keys installed in the cluster
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringRemove(System.String,System.Threading.CancellationToken)">
            <summary>
            KeyringRemove is used to remove a gossip encryption key from the cluster
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringRemove(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            KeyringRemove is used to remove a gossip encryption key from the cluster
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringUse(System.String,System.Threading.CancellationToken)">
            <summary>
            KeyringUse is used to change the active gossip encryption key
            </summary>
        </member>
        <member name="M:Consul.Operator.KeyringUse(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            KeyringUse is used to change the active gossip encryption key
            </summary>
        </member>
        <member name="M:Consul.Operator.SegmentList(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            // SegmentList returns all the available LAN segments.
            </summary>
        </member>
        <member name="M:Consul.Operator.SegmentList(System.Threading.CancellationToken)">
            <summary>
            // SegmentList returns all the available LAN segments.
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaCreate(Consul.AreaRequest,System.Threading.CancellationToken)">
            <summary>
            CreateArea will create a new network area, a generated ID will be returned on success.
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaCreate(Consul.AreaRequest,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            CreateArea will create a new network area, a generated ID will be returned on success.
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaList(System.Threading.CancellationToken)">
            <summary>
            AreaList returns all the available network areas
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaList(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            AreaList returns all the available network areas
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaUpdate(Consul.AreaRequest,System.String,System.Threading.CancellationToken)">
            <summary>
            AreaUpdate will update the configuration of the network area with the given area Id.
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaUpdate(Consul.AreaRequest,System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            AreaUpdate will update the configuration of the network area with the given area Id.
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaGet(System.String,System.Threading.CancellationToken)">
            <summary>
            AreaGet returns a single network area
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaGet(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            AreaGet returns a single network area
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaDelete(System.String,System.Threading.CancellationToken)">
            <summary>
            AreaDelete deletes the given network area.
            </summary>
        </member>
        <member name="M:Consul.Operator.AreaDelete(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            AreaDelete deletes the given network area.
            </summary>
        </member>
        <member name="T:Consul.PolicyLink">
            <summary>
            PolicyLink is the base for representing an ACL Policy in Consul
            </summary>
        </member>
        <member name="T:Consul.PolicyEntry">
            <summary>
            PolicyEntry represents an ACL Policy in Consul
            </summary>
        </member>
        <member name="T:Consul.Policy">
            <summary>
            Policy is used to interact with ACL Policies in Consul through the API
            </summary>
        </member>
        <member name="M:Consul.Policy.Create(Consul.PolicyEntry,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL Policy in Consul
            </summary>
            <param name="policy">The new ACL PolicyEntry</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Policy</returns>
        </member>
        <member name="M:Consul.Policy.Create(Consul.PolicyEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL Policy in Consul
            </summary>
            <param name="policy">The new ACL PolicyEntry</param>
            <param name="writeOptions">Customised write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Policy</returns>
        </member>
        <member name="M:Consul.Policy.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing ACL Policy in Consul
            </summary>
            <param name="id">The ID of the ACL Policy to delete</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.Policy.Delete(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing ACL Policy in Consul
            </summary>
            <param name="id">The ID of the ACL Policy to delete</param>
            <param name="writeOptions">Customised write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.Policy.List(System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL Policies in Consul
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL Policies</returns>
        </member>
        <member name="M:Consul.Policy.List(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL Policies in Consul
            </summary>
            <param name="queryOptions">Customised query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL Policies</returns>
        </member>
        <member name="M:Consul.Policy.Read(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the requested ACL Policy from Consul
            </summary>
            <param name="id">The ID of the ACL Policy to get</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Policy</returns>
        </member>
        <member name="M:Consul.Policy.Read(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the requested ACL Policy from Consul
            </summary>
            <param name="id">The ID of the ACL Policy to get</param>
            <param name="queryOptions">Customised query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Policy</returns>
        </member>
        <member name="M:Consul.Policy.Update(Consul.PolicyEntry,System.Threading.CancellationToken)">
            <summary>
            Updates an existing ACL Policy in Consul
            </summary>
            <param name="policy">The modified ACL Policy</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL Policy</returns>
        </member>
        <member name="M:Consul.Policy.Update(Consul.PolicyEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Updates an existing ACL Policy in Consul
            </summary>
            <param name="policy">The modified ACL Policy</param>
            <param name="writeOptions">Customised write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL policy</returns>
        </member>
        <member name="T:Consul.QueryDatacenterOptions">
            <summary>
            QueryDatacenterOptions sets options about how we fail over if there are no healthy nodes in the local datacenter.
            </summary>
        </member>
        <member name="P:Consul.QueryDatacenterOptions.NearestN">
            <summary>
            NearestN is set to the number of remote datacenters to try, based on network coordinates.
            </summary>
        </member>
        <member name="P:Consul.QueryDatacenterOptions.Datacenters">
            <summary>
            Datacenters is a fixed list of datacenters to try after NearestN. We
            never try a datacenter multiple times, so those are subtracted from
            this list before proceeding.
            </summary>
        </member>
        <member name="T:Consul.QueryDNSOptions">
            <summary>
            QueryDNSOptions controls settings when query results are served over DNS.
            </summary>
        </member>
        <member name="P:Consul.QueryDNSOptions.TTL">
            <summary>
            TTL is the time to live for the served DNS results.
            </summary>
        </member>
        <member name="T:Consul.ServiceQuery">
            <summary>
            ServiceQuery is used to query for a set of healthy nodes offering a specific service.
            </summary>
        </member>
        <member name="P:Consul.ServiceQuery.Service">
            <summary>
            Service is the service to query.
            </summary>
        </member>
        <member name="P:Consul.ServiceQuery.Near">
            <summary>
            Near allows baking in the name of a node to automatically distance-
            sort from. The magic "_agent" value is supported, which sorts near
            the agent which initiated the request by default.
            </summary>
        </member>
        <member name="P:Consul.ServiceQuery.Failover">
            <summary>
            Failover controls what we do if there are no healthy nodes in the local datacenter.
            </summary>
        </member>
        <member name="P:Consul.ServiceQuery.OnlyPassing">
            <summary>
            If OnlyPassing is true then we will only include nodes with passing
            health checks (critical AND warning checks will cause a node to be
            discarded)
            </summary>
        </member>
        <member name="P:Consul.ServiceQuery.Tags">
            <summary>
            Tags are a set of required and/or disallowed tags. If a tag is in
            this list it must be present. If the tag is preceded with "!" then
            it is disallowed.
            </summary>
        </member>
        <member name="T:Consul.QueryTemplate">
            <summary>
            QueryTemplate carries the arguments for creating a templated query.
            </summary>
        </member>
        <member name="P:Consul.QueryTemplate.Type">
            <summary>
            Type specifies the type of the query template. Currently only
            "name_prefix_match" is supported. This field is required.
            </summary>
        </member>
        <member name="P:Consul.QueryTemplate.Regexp">
            <summary>
            Regexp allows specifying a regex pattern to match against the name
            of the query being executed.
            </summary>
        </member>
        <member name="T:Consul.PreparedQueryDefinition">
            <summary>
            PrepatedQueryDefinition defines a complete prepared query.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryDefinition.ID">
            <summary>
            ID is this UUID-based ID for the query, always generated by Consul.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryDefinition.Name">
            <summary>
            Name is an optional friendly name for the query supplied by the
            user. NOTE - if this feature is used then it will reduce the security
            of any read ACL associated with this query/service since this name
            can be used to locate nodes with supplying any ACL.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryDefinition.Session">
            <summary>
            Session is an optional session to tie this query's lifetime to. If
            this is omitted then the query will not expire.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryDefinition.Token">
            <summary>
            Token is the ACL token used when the query was created, and it is
            used when a query is subsequently executed. This token, or a token
            with management privileges, must be used to change the query later.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryDefinition.Service">
            <summary>
            Service defines a service query (leaving things open for other types
            later).
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryDefinition.DNS">
            <summary>
            DNS has options that control how the results of this query are
            served over DNS.
            </summary>
        </member>
        <member name="T:Consul.PreparedQueryExecuteResponse">
            <summary>
            PreparedQueryExecuteResponse has the results of executing a query.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryExecuteResponse.Service">
            <summary>
            Service is the service that was queried.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryExecuteResponse.Nodes">
            <summary>
            Nodes has the nodes that were output by the query.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryExecuteResponse.DNS">
            <summary>
            DNS has the options for serving these results over DNS.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryExecuteResponse.Datacenter">
            <summary>
            Datacenter is the datacenter that these results came from.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryExecuteResponse.Failovers">
            <summary>
            Failovers is a count of how many times we had to query a remote
            datacenter.
            </summary>
        </member>
        <member name="P:Consul.PreparedQueryExplainResponse.Query">
            <summary>
            Query has the fully-rendered query.
            </summary>
        </member>
        <member name="M:Consul.PreparedQuery.Explain(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Shows which query a name resolves to, the fully interpolated template (if it's a template), as well as additional info about the execution of a query.
            </summary>
            <param name="queryIDOrName">Specifies the UUID of the query to explain. This can also be the name of an existing prepared query,
            or a name that matches a prefix name for a prepared query template</param>
            <param name="q">Query Options</param>
            <param name="ct">Cancellation Token</param>
            <returns>Returns a single prepared query</returns>
        </member>
        <member name="M:Consul.PreparedQuery.Explain(System.String,System.Threading.CancellationToken)">
            <summary>
            Shows which query a name resolves to, the fully interpolated template (if it's a template), as well as additional info about the execution of a query.
            </summary>
            <param name="queryIDOrName">Specifies the UUID of the query to explain. This can also be the name of an existing prepared query,
            or a name that matches a prefix name for a prepared query template</param>
            <param name="ct">Cancellation Token</param>
            <returns>Returns a single prepared query</returns>
        </member>
        <member name="T:Consul.Raw">
            <summary>
            Raw can be used to do raw queries against custom endpoints
            </summary>
        </member>
        <member name="M:Consul.Raw.Query(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Query is used to do a GET request against an endpoint and deserialize the response into an interface using standard Consul conventions.
            </summary>
            <param name="endpoint">The URL endpoint to access</param>
            <param name="q">Custom query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>The data returned by the custom endpoint</returns>
        </member>
        <member name="M:Consul.Raw.Write(System.String,System.Object,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Write is used to do a PUT request against an endpoint and serialize/deserialized using the standard Consul conventions.
            </summary>
            <param name="endpoint">The URL endpoint to access</param>
            <param name="obj">The object to serialize and send to the endpoint. Must be able to be JSON serialized, or be an object of type byte[], which is sent without serialzation.</param>
            <param name="q">Custom write options</param>
            <param name="ct">The cancellation token</param>
            <returns>The data returned by the custom endpoint in response to the write request</returns>
        </member>
        <member name="T:Consul.RoleLink">
            <summary>
            RoleLink is the base for representing an ACL Role in Consul
            </summary>
        </member>
        <member name="T:Consul.RoleEntry">
            <summary>
            RoleEntry represents an ACL Role in Consul
            </summary>
        </member>
        <member name="T:Consul.Role">
            <summary>
            Role is used to interact with ACL Roles in Consul through the API
            </summary>
        </member>
        <member name="M:Consul.Role.Create(Consul.RoleEntry,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL Role in Consul
            </summary>
            <param name="policy">The new ACL Role</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Role</returns>
        </member>
        <member name="M:Consul.Role.Create(Consul.RoleEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL Role in Consul
            </summary>
            <param name="policy">The new ACL Role</param>
            <param name="writeOptions">Customised write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Role</returns>
        </member>
        <member name="M:Consul.Role.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes and existing ACL Role from Consul
            </summary>
            <param name="id">The ID of the ACL Role to delete</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.Role.Delete(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing ACL Role from Consul
            </summary>
            <param name="id">The ID of the ACL Role to delete</param>
            <param name="writeOptions">Customised write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.Role.List(System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL Roles in Consul
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL Roles</returns>
        </member>
        <member name="M:Consul.Role.List(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL Roles in Consul
            </summary>
            <param name="queryOptions">Customised query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL Roles</returns>
        </member>
        <member name="M:Consul.Role.Read(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the requested ACL Role from Consul
            </summary>
            <param name="id">The ID of the ACL Role to get</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Role</returns>
        </member>
        <member name="M:Consul.Role.Read(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the requested ACL Role from Consul
            </summary>
            <param name="id">The ID of the ACL Role to get</param>
            <param name="queryOptions">Customised query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Role</returns>
        </member>
        <member name="M:Consul.Role.ReadByName(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the requested ACL Role from Consul
            </summary>
            <param name="name">The Name of the ACL Role to get</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Role</returns>
        </member>
        <member name="M:Consul.Role.ReadByName(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the requested ACL Role from Consul
            </summary>
            <param name="name">The Name of the ACL Role to get</param>
            <param name="queryOptions">Customised query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Role</returns>
        </member>
        <member name="M:Consul.Role.Update(Consul.RoleEntry,System.Threading.CancellationToken)">
            <summary>
            Updates an existing ACL Role in Consul
            </summary>
            <param name="role">The modified ACL Role</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL Role</returns>
        </member>
        <member name="M:Consul.Role.Update(Consul.RoleEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Updates an existing ACL Role in Consul
            </summary>
            <param name="role">The modified ACL Role</param>
            <param name="writeOptions">Customised write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL Role</returns>
        </member>
        <member name="T:Consul.Semaphore">
            <summary>
            Semaphore is used to implement a distributed semaphore using the Consul KV primitives.
            </summary>
        </member>
        <member name="T:Consul.Semaphore.SemaphoreLock">
            <summary>
            SemaphoreLock is written under the DefaultSemaphoreKey and is used to coordinate between all the contenders.
            </summary>
        </member>
        <member name="F:Consul.Semaphore.DefaultSemaphoreWaitTime">
            <summary>
            DefaultSemaphoreWaitTime is how long we block for at a time to check if semaphore acquisition is possible. This affects the minimum time it takes to cancel a Semaphore acquisition.
            </summary>
        </member>
        <member name="F:Consul.Semaphore.DefaultSemaphoreRetryTime">
            <summary>
            DefaultSemaphoreRetryTime is how long we wait after a failed lock acquisition before attempting to do the lock again. This is so that once a lock-delay is in affect, we do not hot loop retrying the acquisition.
            </summary>
        </member>
        <member name="F:Consul.Semaphore.DefaultMonitorRetryTime">
            <summary>
            DefaultMonitorRetryTime is how long we wait after a failed monitor check
            of a semaphore (500 response code). This allows the monitor to ride out brief
            periods of unavailability, subject to the MonitorRetries setting in the
            lock options which is by default set to 0, disabling this feature.
            </summary>
        </member>
        <member name="F:Consul.Semaphore.DefaultSemaphoreKey">
            <summary>
            DefaultSemaphoreKey is the key used within the prefix to use for coordination between all the contenders.
            </summary>
        </member>
        <member name="F:Consul.Semaphore.SemaphoreFlagValue">
            <summary>
            SemaphoreFlagValue is a magic flag we set to indicate a key is being used for a semaphore. It is used to detect a potential conflict with a lock.
            </summary>
        </member>
        <member name="M:Consul.Semaphore.Acquire">
            <summary>
            Acquire attempts to reserve a slot in the semaphore, blocking until success. Not providing a CancellationToken means the thread can block indefinitely until the lock is acquired.
            There is no notification that the semaphore slot has been lost, but IsHeld may be set to False at any time due to session invalidation, communication errors, operator intervention, etc.
            It is NOT safe to assume that the slot is held until Release() unless the Session is specifically created without any associated health checks.
            By default Consul sessions prefer liveness over safety and an application must be able to handle the session being lost.
            </summary>
        </member>
        <member name="M:Consul.Semaphore.Acquire(System.Threading.CancellationToken)">
            <summary>
            Acquire attempts to reserve a slot in the semaphore, blocking until success, interrupted via CancellationToken or if an error is encountered.
            A provided CancellationToken can be used to abort the attempt.
            There is no notification that the semaphore slot has been lost, but IsHeld may be set to False at any time due to session invalidation, communication errors, operator intervention, etc.
            It is NOT safe to assume that the slot is held until Release() unless the Session is specifically created without any associated health checks.
            By default Consul sessions prefer liveness over safety and an application must be able to handle the session being lost.
            </summary>
            <param name="ct">The cancellation token to cancel semaphore acquisition</param>
        </member>
        <member name="M:Consul.Semaphore.Release(System.Threading.CancellationToken)">
            <summary>
            Release is used to voluntarily give up our semaphore slot. It is an error to call this if the semaphore has not been acquired.
            </summary>
        </member>
        <member name="M:Consul.Semaphore.Destroy(System.Threading.CancellationToken)">
            <summary>
            Destroy is used to cleanup the semaphore entry. It is not necessary to invoke. It will fail if the semaphore is in use.
            </summary>
        </member>
        <member name="M:Consul.Semaphore.MonitorLock(System.String)">
            <summary>
            monitorLock is a long running routine to monitor a semaphore ownership
            It sets IsHeld to false if we lose our slot.
            </summary>
            <param name="lockSession">The session ID to monitor</param>
        </member>
        <member name="M:Consul.Semaphore.CreateSession">
            <summary>
            CreateSession is used to create a new managed session
            </summary>
            <returns>The session ID</returns>
        </member>
        <member name="M:Consul.Semaphore.ContenderEntry(System.String)">
            <summary>
            contenderEntry returns a formatted KVPair for the contender
            </summary>
            <param name="session">The session ID</param>
            <returns>The K/V pair with the Semaphore flag set</returns>
        </member>
        <member name="M:Consul.Semaphore.FindLock(Consul.KVPair[])">
            <summary>
            findLock is used to find the KV Pair which is used for coordination
            </summary>
            <param name="pairs">A list of KVPairs</param>
            <returns>The semaphore storage KV pair</returns>
        </member>
        <member name="M:Consul.Semaphore.DecodeLock(Consul.KVPair)">
            <summary>
            DecodeLock is used to decode a SemaphoreLock from an entry in Consul
            </summary>
            <param name="pair"></param>
            <returns>A decoded lock or a new, blank lock</returns>
        </member>
        <member name="M:Consul.Semaphore.EncodeLock(Consul.Semaphore.SemaphoreLock,System.UInt64)">
            <summary>
            EncodeLock is used to encode a SemaphoreLock into a KVPair that can be PUT
            </summary>
            <param name="l">The SemaphoreLock data</param>
            <param name="oldIndex">The index that the data was fetched from, for CAS</param>
            <returns>A K/V pair with the lock data encoded in the Value field</returns>
        </member>
        <member name="M:Consul.Semaphore.PruneDeadHolders(Consul.Semaphore.SemaphoreLock,System.Collections.Generic.IEnumerable{Consul.KVPair})">
            <summary>
            PruneDeadHolders is used to remove all the dead lock holders
            </summary>
            <param name="l">The SemaphoreLock to prune</param>
            <param name="pairs">The list of K/V that currently hold locks</param>
        </member>
        <member name="T:Consul.SemaphoreOptions">
            <summary>
            SemaphoreOptions is used to parameterize the Semaphore
            </summary>
        </member>
        <member name="F:Consul.SemaphoreOptions.DefaultLockSessionName">
            <summary>
             DefaultSemaphoreSessionName is the Session Name we assign if none is provided
            </summary>
        </member>
        <member name="F:Consul.SemaphoreOptions._defaultLockSessionTTL">
            <summary>
            DefaultSemaphoreSessionTTL is the default session TTL if no Session is provided when creating a new Semaphore. This is used because we do not have any other check to depend upon.
            </summary>
        </member>
        <member name="T:Consul.ServiceIdentity">
            <summary>
            ServiceIdentity represents a service identity in Consul
            </summary>
        </member>
        <member name="T:Consul.Session">
            <summary>
            Session can be used to query the Session endpoints
            </summary>
        </member>
        <member name="M:Consul.Session.RenewPeriodic(System.TimeSpan,System.String,System.Threading.CancellationToken)">
            <summary>
            RenewPeriodic is used to periodically invoke Session.Renew on a session until a CancellationToken is cancelled.
            This is meant to be used in a long running call to ensure a session stays valid until completed.
            </summary>
            <param name="initialTTL">The initital TTL to renew for</param>
            <param name="id">The session ID to renew</param>
            <param name="ct">The CancellationToken used to stop the session from being renewed (e.g. when the long-running action completes)</param>
        </member>
        <member name="M:Consul.Session.RenewPeriodic(System.TimeSpan,System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            RenewPeriodic is used to periodically invoke Session.Renew on a session until a CancellationToken is cancelled.
            This is meant to be used in a long running call to ensure a session stays valid until completed.
            </summary>
            <param name="initialTTL">The initital TTL to renew for</param>
            <param name="id">The session ID to renew</param>
            <param name="q">Customized write options</param>
            <param name="ct">The CancellationToken used to stop the session from being renewed (e.g. when the long-running action completes)</param>
        </member>
        <member name="M:Consul.Session.Create(System.Threading.CancellationToken)">
            <summary>
            Create makes a new session. Providing a session entry can customize the session. It can also be null to use defaults.
            </summary>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the new session ID</returns>
        </member>
        <member name="M:Consul.Session.Create(Consul.SessionEntry,System.Threading.CancellationToken)">
            <summary>
            Create makes a new session with default options.
            </summary>
            <returns>A write result containing the new session ID</returns>
        </member>
        <member name="M:Consul.Session.Create(Consul.SessionEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Create makes a new session. Providing a session entry can customize the session. It can also be null to use defaults.
            </summary>
            <param name="se">The SessionEntry options to use</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the new session ID</returns>
        </member>
        <member name="M:Consul.Session.CreateNoChecks(System.Threading.CancellationToken)">
            <summary>
            CreateNoChecks is like Create but is used specifically to create a session with no associated health checks.
            </summary>
        </member>
        <member name="M:Consul.Session.CreateNoChecks(Consul.SessionEntry,System.Threading.CancellationToken)">
            <summary>
            CreateNoChecks is like Create but is used specifically to create a session with no associated health checks.
            </summary>
            <param name="se">The SessionEntry options to use</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the new session ID</returns>
        </member>
        <member name="M:Consul.Session.CreateNoChecks(Consul.SessionEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            CreateNoChecks is like Create but is used specifically to create a session with no associated health checks.
            </summary>
            <param name="se">The SessionEntry options to use</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the new session ID</returns>
        </member>
        <member name="M:Consul.Session.Destroy(System.String,System.Threading.CancellationToken)">
            <summary>
            Destroy invalidates a given session
            </summary>
            <param name="id">The session ID to destroy</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the result of the session destruction</returns>
        </member>
        <member name="M:Consul.Session.Destroy(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Destroy invalidates a given session
            </summary>
            <param name="id">The session ID to destroy</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>A write result containing the result of the session destruction</returns>
        </member>
        <member name="M:Consul.Session.Info(System.String,System.Threading.CancellationToken)">
            <summary>
            Info looks up a single session
            </summary>
            <param name="id">The session ID to look up</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the session information, or an empty query result if the session entry does not exist</returns>
        </member>
        <member name="M:Consul.Session.Info(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Info looks up a single session
            </summary>
            <param name="id">The session ID to look up</param>
            <param name="q">Customized query options</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the session information, or an empty query result if the session entry does not exist</returns>
        </member>
        <member name="M:Consul.Session.List(System.Threading.CancellationToken)">
            <summary>
            List gets all active sessions
            </summary>
            <returns>A query result containing list of all sessions, or an empty query result if no sessions exist</returns>
        </member>
        <member name="M:Consul.Session.List(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            List gets all active sessions
            </summary>
            <param name="q">Customized query options</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the list of sessions, or an empty query result if no sessions exist</returns>
        </member>
        <member name="M:Consul.Session.Node(System.String,System.Threading.CancellationToken)">
            <summary>
            Node gets all sessions for a node
            </summary>
            <param name="node">The node ID</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the list of sessions, or an empty query result if no sessions exist</returns>
        </member>
        <member name="M:Consul.Session.Node(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Node gets all sessions for a node
            </summary>
            <param name="node">The node ID</param>
            <param name="q">Customized query options</param>
            <param name="ct">The cancellation token</param>
            <returns>A query result containing the list of sessions, or an empty query result if no sessions exist</returns>
        </member>
        <member name="M:Consul.Session.Renew(System.String,System.Threading.CancellationToken)">
            <summary>
            Renew renews the TTL on a given session
            </summary>
            <param name="id">The session ID to renew</param>
            <param name="ct">The cancellation token</param>
            <returns>An updated session entry</returns>
        </member>
        <member name="M:Consul.Session.Renew(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Renew renews the TTL on a given session
            </summary>
            <param name="id">The session ID to renew</param>
            <param name="q">Customized write options</param>
            <param name="ct">The cancellation token</param>
            <returns>An updated session entry</returns>
        </member>
        <member name="M:Consul.Snapshot.#ctor(Consul.ConsulClient)">
            <summary>
            Snapshot can be used to query the /v1/snapshot endpoint to take snapshots of
            Consul's internal state and restore snapshots for disaster recovery.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Consul.Status.Leader(System.Threading.CancellationToken)">
            <summary>
            Leader is used to query for a known leader
            </summary>
            <returns>A write result containing the leader node name</returns>
        </member>
        <member name="M:Consul.Status.Peers(System.Threading.CancellationToken)">
            <summary>
            Peers is used to query for a known raft peers
            </summary>
            <returns>A write result containing the list of Raft peers</returns>
        </member>
        <member name="T:Consul.TokenEntry">
            <summary>
            TokenEntry is used to represent an ACL Token in Consul
            </summary>
        </member>
        <member name="T:Consul.Token">
            <summary>
            Token is used to interact with ACL Tokens in Consul through the API
            </summary>
        </member>
        <member name="M:Consul.Token.Bootstrap(System.Threading.CancellationToken)">
            <summary>
            Creates the initial Management ACL Token in Consul
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Token</returns>
        </member>
        <member name="M:Consul.Token.Bootstrap(Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Creates the initial Management ACL Token in Consul
            </summary>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Token</returns>
        </member>
        <member name="M:Consul.Token.Create(Consul.TokenEntry,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL Token in Consul
            </summary>
            <param name="token">The new ACL Token</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Token</returns>
        </member>
        <member name="M:Consul.Token.Create(Consul.TokenEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new ACL Token in Consul
            </summary>
            <param name="token">The new ACL Token</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL Token</returns>
        </member>
        <member name="M:Consul.Token.Update(Consul.TokenEntry,System.Threading.CancellationToken)">
            <summary>
            Updates an existing ACL Token in Consul
            </summary>
            <param name="token">The modified ACL Token</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL Token</returns>
        </member>
        <member name="M:Consul.Token.Update(Consul.TokenEntry,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Updates an existing ACL Token in Consul
            </summary>
            <param name="token">The modified ACL Token</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the updated ACL Token</returns>
        </member>
        <member name="M:Consul.Token.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing ACL Token from Consul
            </summary>
            <param name="id">The Accessor ID of the ACL Token to delete</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.Token.Delete(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing ACL Token from Consul
            </summary>
            <param name="id">The Accessor ID of the ACL Token to delete</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>Success (true) or failure (false)</returns>
        </member>
        <member name="M:Consul.Token.Clone(System.String,System.Threading.CancellationToken)">
            <summary>
            Clones an existing ACL Token in Consul
            </summary>
            <param name="id">The Accessor ID of the ACL Token to clone</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL token</returns>
        </member>
        <member name="M:Consul.Token.Clone(System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Clones an existing ACL Token in Consul
            </summary>
            <param name="id">The Accessor ID of the ACL Token to clone</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL token</returns>
        </member>
        <member name="M:Consul.Token.Clone(System.String,System.String,Consul.WriteOptions,System.Threading.CancellationToken)">
            <summary>
            Clones an existing ACL Token in Consul
            </summary>
            <param name="id">The Accessor ID of the ACL Token to clone</param>
            <param name="description">The description for the cloned ACL Token</param>
            <param name="writeOptions">Customized write options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A write result containing the created ACL token</returns>
        </member>
        <member name="M:Consul.Token.Read(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an existing ACL Token from Consul
            </summary>
            <param name="id">The Accessor ID of the ACL Token to get</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Token</returns>
        </member>
        <member name="M:Consul.Token.Read(System.String,Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Gets an existing ACL Token from Consul
            </summary>
            <param name="id">The Accessor ID of the ACL Token to get</param>
            <param name="queryOptions">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing the requested ACL Token</returns>
        </member>
        <member name="M:Consul.Token.List(System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL Tokens in Consul
            </summary>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL Tokens</returns>
        </member>
        <member name="M:Consul.Token.List(Consul.QueryOptions,System.Threading.CancellationToken)">
            <summary>
            Lists the existing ACL Tokens in Consul
            </summary>
            <param name="queryOptions">Customized query options</param>
            <param name="ct">Cancellation token for long poll request. If set, OperationCanceledException will be thrown if the request is cancelled before completing</param>
            <returns>A query result containing an array of ACL Tokens</returns>
        </member>
    </members>
</doc>
